{"version":3,"file":"vendor-legacy.3cc3c1bb.js","sources":["../../node_modules/.pnpm/registry.nlark.com+@vue+shared@3.1.5/node_modules/@vue/shared/dist/shared.esm-bundler.js","../../node_modules/.pnpm/registry.nlark.com+@vue+runtime-core@3.1.5/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js","../../node_modules/.pnpm/registry.nlark.com+@vue+reactivity@3.1.5/node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js","../../node_modules/.pnpm/registry.nlark.com+@vue+runtime-dom@3.1.5/node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/config.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/util/html-decode.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/util/env.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/util/current-node-id.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/util/fetch-aop.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/siyuan-api/sql.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/siyuan-api/attr.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/cache/api-cache.js","../../node_modules/.pnpm/siyuan_api_cache_lib@1.0.2/node_modules/siyuan_api_cache_lib/dist/index.js"],"sourcesContent":["/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n/**\r\n * dev only flag -> name mapping\r\n */\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\n/**\r\n * Dev only\r\n */\r\nconst slotFlagsText = {\r\n    [1 /* STABLE */]: 'STABLE',\r\n    [2 /* DYNAMIC */]: 'DYNAMIC',\r\n    [3 /* FORWARDED */]: 'FORWARDED'\r\n};\n\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\r\n    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\r\n    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    // Split the content into individual lines but capture the newline sequence\r\n    // that separated each line. This is important because the actual sequence is\r\n    // needed to properly take into account the full line length for offset\r\n    // comparison\r\n    let lines = source.split(/(\\r?\\n)/);\r\n    // Separate the lines and newline sequences into separate arrays for easier referencing\r\n    const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);\r\n    lines = lines.filter((_, idx) => idx % 2 === 0);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count +=\r\n            lines[i].length +\r\n                ((newlineSequences[i] && newlineSequences[i].length) || 0);\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                const newLineSeqLength = (newlineSequences[j] && newlineSequences[j].length) || 0;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - (lineLength + newLineSeqLength));\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + '^'.repeat(length));\r\n                    }\r\n                    count += lineLength + newLineSeqLength;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: 'accept-charset',\r\n    className: 'class',\r\n    htmlFor: 'for',\r\n    httpEquiv: 'http-equiv'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`);\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don't stringify bindings that cannot be set from HTML.\r\n * Don't also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`);\n\nfunction normalizeStyle(value) {\r\n    if (isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = '';\r\n    if (!styles) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\r\n        if (isString(value) ||\r\n            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = '';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeClass(value[i]);\r\n            if (normalized) {\r\n                res += normalized + ' ';\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + ' ';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +\r\n    'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' +\r\n    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +\r\n    'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' +\r\n    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +\r\n    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +\r\n    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +\r\n    'option,output,progress,select,textarea,details,dialog,menu,' +\r\n    'summary,template,blockquote,iframe,tfoot';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +\r\n    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +\r\n    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +\r\n    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +\r\n    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +\r\n    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +\r\n    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +\r\n    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +\r\n    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +\r\n    'text,textPath,title,tspan,unknown,use,view';\r\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\r\nconst isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);\r\nconst isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);\r\nconst isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);\n\nconst escapeRE = /[\"'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = '' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = '';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // \"\r\n                escaped = '&quot;';\r\n                break;\r\n            case 38: // &\r\n                escaped = '&amp;';\r\n                break;\r\n            case 39: // '\r\n                escaped = '&#39;';\r\n                break;\r\n            case 60: // <\r\n                escaped = '&lt;';\r\n                break;\r\n            case 62: // >\r\n                escaped = '&gt;';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.substring(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, '');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = isArray(a);\r\n    bValidType = isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = isObject(a);\r\n    bValidType = isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return val == null\r\n        ? ''\r\n        : isObject(val)\r\n            ? JSON.stringify(val, replacer, 2)\r\n            : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\r\nconst babelParserDefaultPlugins = [\r\n    'bigInt',\r\n    'optionalChaining',\r\n    'nullishCoalescingOperator'\r\n];\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith('onUpdate:');\r\nconst extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nconst isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === '[object Map]';\r\nconst isSet = (val) => toTypeString(val) === '[object Set]';\r\nconst isDate = (val) => val instanceof Date;\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isString = (val) => typeof val === 'string';\r\nconst isSymbol = (val) => typeof val === 'symbol';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst toRawType = (value) => {\r\n    // extract \"RawType\" from strings like \"[object RawType]\"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nconst isIntegerKey = (key) => isString(key) &&\r\n    key !== 'NaN' &&\r\n    key[0] !== '-' &&\r\n    '' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ makeMap(\r\n// the leading comma is intentional so empty string \"\" is also included\r\n',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => (str ? `on${capitalize(str)}` : ``));\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== 'undefined'\r\n                ? globalThis\r\n                : typeof self !== 'undefined'\r\n                    ? self\r\n                    : typeof window !== 'undefined'\r\n                        ? window\r\n                        : typeof global !== 'undefined'\r\n                            ? global\r\n                            : {}));\r\n};\n\nexport { EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, babelParserDefaultPlugins, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, invokeArrayFns, isArray, isBooleanAttr, isDate, isFunction, isGloballyWhitelisted, isHTMLTag, isIntegerKey, isKnownAttr, isMap, isModelListener, isNoUnitNumericStyleProp, isObject, isOn, isPlainObject, isPromise, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, slotFlagsText, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toRawType, toTypeString };\n","import { pauseTracking, resetTracking, isRef, toRaw, isReactive, effect, stop, ref, reactive, shallowReactive, trigger, isProxy, shallowReadonly, track, markRaw, proxyRefs, computed as computed$1, isReadonly } from '@vue/reactivity';\nexport { customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref } from '@vue/reactivity';\nimport { isString, isFunction as isFunction$1, isPromise as isPromise$1, isArray, extend, hasOwn, EMPTY_OBJ, toHandlerKey, toNumber, hyphenate, camelize, isOn, isModelListener, remove, NOOP, hasChanged, isObject as isObject$1, isSet, isMap, isPlainObject, invokeArrayFns, def, isReservedProp, EMPTY_ARR, capitalize, toRawType, makeMap, NO, getGlobalThis, normalizeClass, normalizeStyle, isGloballyWhitelisted } from '@vue/shared';\nexport { camelize, capitalize, toDisplayString, toHandlerKey } from '@vue/shared';\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(''),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join('\\n'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === 'number' ||\r\n        typeof value === 'boolean' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (isRef(value)) {\r\n        value = formatProp(key, toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (isFunction$1(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"sp\" /* SERVER_PREFETCH */]: 'serverPrefetch hook',\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* VNODE_HOOK */]: 'vnode hook',\r\n    [8 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [9 /* TRANSITION_HOOK */]: 'transition hook',\r\n    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [12 /* FUNCTION_REF */]: 'ref function',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',\r\n    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction$1(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise$1(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = (process.env.NODE_ENV !== 'production') ? ErrorTypeStrings[type] : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n        // crash in dev by default so it's more noticeable\r\n        if (throwInDev) {\r\n            throw err;\r\n        }\r\n        else {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\n// #2768\r\n// Use binary-search to find a suitable position in the queue,\r\n// so that the queue maintains the increasing order of job's id,\r\n// which can prevent the job from being skipped and also can avoid repeated patching.\r\nfunction findInsertionIndex(job) {\r\n    // the start index should be `flushIndex + 1`\r\n    let start = flushIndex + 1;\r\n    let end = queue.length;\r\n    const jobId = getId(job);\r\n    while (start < end) {\r\n        const middle = (start + end) >>> 1;\r\n        const middleJobId = getId(queue[middle]);\r\n        middleJobId < jobId ? (start = middle + 1) : (end = middle);\r\n    }\r\n    return start;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user's responsibility to\r\n    // ensure it doesn't end up in an infinite loop.\r\n    if ((!queue.length ||\r\n        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        const pos = findInsertionIndex(job);\r\n        if (pos > -1) {\r\n            queue.splice(pos, 0, job);\r\n        }\r\n        else {\r\n            queue.push(job);\r\n        }\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = queue.indexOf(job);\r\n    if (i > flushIndex) {\r\n        queue.splice(i, 1);\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        seen = seen || new Map();\r\n    }\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component's update,\r\n    //    its update can be skipped.\r\n    queue.sort((a, b) => getId(a) - getId(b));\r\n    try {\r\n        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\r\n            const job = queue[flushIndex];\r\n            if (job && job.active !== false) {\r\n                if ((process.env.NODE_ENV !== 'production') && checkRecursiveUpdates(seen, job)) {\r\n                    continue;\r\n                }\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (queue.length ||\r\n            pendingPreFlushCbs.length ||\r\n            pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            const instance = fn.ownerInstance;\r\n            const componentName = instance && getComponentName(instance.type);\r\n            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n            return true;\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    const globalObject = typeof global !== 'undefined'\r\n        ? global\r\n        : typeof self !== 'undefined'\r\n            ? self\r\n            : typeof window !== 'undefined'\r\n                ? window\r\n                : {};\r\n    globalObject.__VUE_HMR_RUNTIME__ = {\r\n        createRecord: tryWrap(createRecord),\r\n        rerender: tryWrap(rerender),\r\n        reload: tryWrap(reload)\r\n    };\r\n}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id, instance.type);\r\n        record = map.get(id);\r\n    }\r\n    record.instances.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).instances.delete(instance);\r\n}\r\nfunction createRecord(id, component) {\r\n    if (!component) {\r\n        warn(`HMR API usage is out of date.\\n` +\r\n            `Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant ` +\r\n            `dependency that handles Vue SFC compilation.`);\r\n        component = {};\r\n    }\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, {\r\n        component: isClassComponent(component) ? component.__vccOpts : component,\r\n        instances: new Set()\r\n    });\r\n    return true;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    if (newRender)\r\n        record.component.render = newRender;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    Array.from(record.instances).forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    const { component, instances } = record;\r\n    if (!hmrDirtyComponents.has(component)) {\r\n        // 1. Update existing comp definition to match new one\r\n        newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;\r\n        extend(component, newComp);\r\n        for (const key in component) {\r\n            if (key !== '__file' && !(key in newComp)) {\r\n                delete component[key];\r\n            }\r\n        }\r\n        // 2. Mark component dirty. This forces the renderer to replace the component\r\n        // on patch.\r\n        hmrDirtyComponents.add(component);\r\n        // 3. Make sure to unmark the component after the reload.\r\n        queuePostFlushCb(() => {\r\n            hmrDirtyComponents.delete(component);\r\n        });\r\n    }\r\n    Array.from(instances).forEach(instance => {\r\n        if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don't end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== 'undefined') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\r\n        }\r\n    });\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nfunction setDevtoolsHook(hook) {\r\n    devtools = hook;\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    // TODO queue if devtools is undefined\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:init\" /* APP_INIT */, app, version, {\r\n        Fragment,\r\n        Text,\r\n        Comment: Comment$1,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:unmount\" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\r\nconst devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\r\nconst devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);\r\n    };\r\n}\r\nconst devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:start\" /* PERFORMANCE_START */);\r\nconst devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:end\" /* PERFORMANCE_END */);\r\nfunction createDevtoolsPerformanceHook(hook) {\r\n    return (component, type, time) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component, type, time);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nconst deprecationData = {\r\n    [\"GLOBAL_MOUNT\" /* GLOBAL_MOUNT */]: {\r\n        message: `The global app bootstrapping API has changed: vm.$mount() and the \"el\" ` +\r\n            `option have been removed. Use createApp(RootComponent).mount() instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#mounting-app-instance`\r\n    },\r\n    [\"GLOBAL_MOUNT_CONTAINER\" /* GLOBAL_MOUNT_CONTAINER */]: {\r\n        message: `Vue detected directives on the mount container. ` +\r\n            `In Vue 3, the container is no longer considered part of the template ` +\r\n            `and will not be processed/replaced.`,\r\n        link: `https://v3.vuejs.org/guide/migration/mount-changes.html`\r\n    },\r\n    [\"GLOBAL_EXTEND\" /* GLOBAL_EXTEND */]: {\r\n        message: `Vue.extend() has been removed in Vue 3. ` +\r\n            `Use defineComponent() instead.`,\r\n        link: `https://v3.vuejs.org/api/global-api.html#definecomponent`\r\n    },\r\n    [\"GLOBAL_PROTOTYPE\" /* GLOBAL_PROTOTYPE */]: {\r\n        message: `Vue.prototype is no longer available in Vue 3. ` +\r\n            `Use app.config.globalProperties instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#vue-prototype-replaced-by-config-globalproperties`\r\n    },\r\n    [\"GLOBAL_SET\" /* GLOBAL_SET */]: {\r\n        message: `Vue.set() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"GLOBAL_DELETE\" /* GLOBAL_DELETE */]: {\r\n        message: `Vue.delete() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"GLOBAL_OBSERVABLE\" /* GLOBAL_OBSERVABLE */]: {\r\n        message: `Vue.observable() has been removed. ` +\r\n            `Use \\`import { reactive } from \"vue\"\\` from Composition API instead.`,\r\n        link: `https://v3.vuejs.org/api/basic-reactivity.html`\r\n    },\r\n    [\"GLOBAL_PRIVATE_UTIL\" /* GLOBAL_PRIVATE_UTIL */]: {\r\n        message: `Vue.util has been removed. Please refactor to avoid its usage ` +\r\n            `since it was an internal API even in Vue 2.`\r\n    },\r\n    [\"CONFIG_SILENT\" /* CONFIG_SILENT */]: {\r\n        message: `config.silent has been removed because it is not good practice to ` +\r\n            `intentionally suppress warnings. You can use your browser console's ` +\r\n            `filter features to focus on relevant messages.`\r\n    },\r\n    [\"CONFIG_DEVTOOLS\" /* CONFIG_DEVTOOLS */]: {\r\n        message: `config.devtools has been removed. To enable devtools for ` +\r\n            `production, configure the __VUE_PROD_DEVTOOLS__ compile-time flag.`,\r\n        link: `https://github.com/vuejs/vue-next/tree/master/packages/vue#bundler-build-feature-flags`\r\n    },\r\n    [\"CONFIG_KEY_CODES\" /* CONFIG_KEY_CODES */]: {\r\n        message: `config.keyCodes has been removed. ` +\r\n            `In Vue 3, you can directly use the kebab-case key names as v-on modifiers.`,\r\n        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`\r\n    },\r\n    [\"CONFIG_PRODUCTION_TIP\" /* CONFIG_PRODUCTION_TIP */]: {\r\n        message: `config.productionTip has been removed.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-productiontip-removed`\r\n    },\r\n    [\"CONFIG_IGNORED_ELEMENTS\" /* CONFIG_IGNORED_ELEMENTS */]: {\r\n        message: () => {\r\n            let msg = `config.ignoredElements has been removed.`;\r\n            if (isRuntimeOnly()) {\r\n                msg += ` Pass the \"isCustomElement\" option to @vue/compiler-dom instead.`;\r\n            }\r\n            else {\r\n                msg += ` Use config.isCustomElement instead.`;\r\n            }\r\n            return msg;\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement`\r\n    },\r\n    [\"CONFIG_WHITESPACE\" /* CONFIG_WHITESPACE */]: {\r\n        // this warning is only relevant in the full build when using runtime\r\n        // compilation, so it's put in the runtime compatConfig list.\r\n        message: `Vue 3 compiler's whitespace option will default to \"condense\" instead of ` +\r\n            `\"preserve\". To suppress this warning, provide an explicit value for ` +\r\n            `\\`config.compilerOptions.whitespace\\`.`\r\n    },\r\n    [\"CONFIG_OPTION_MERGE_STRATS\" /* CONFIG_OPTION_MERGE_STRATS */]: {\r\n        message: `config.optionMergeStrategies no longer exposes internal strategies. ` +\r\n            `Use custom merge functions instead.`\r\n    },\r\n    [\"INSTANCE_SET\" /* INSTANCE_SET */]: {\r\n        message: `vm.$set() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"INSTANCE_DELETE\" /* INSTANCE_DELETE */]: {\r\n        message: `vm.$delete() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"INSTANCE_DESTROY\" /* INSTANCE_DESTROY */]: {\r\n        message: `vm.$destroy() has been removed. Use app.unmount() instead.`,\r\n        link: `https://v3.vuejs.org/api/application-api.html#unmount`\r\n    },\r\n    [\"INSTANCE_EVENT_EMITTER\" /* INSTANCE_EVENT_EMITTER */]: {\r\n        message: `vm.$on/$once/$off() have been removed. ` +\r\n            `Use an external event emitter library instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/events-api.html`\r\n    },\r\n    [\"INSTANCE_EVENT_HOOKS\" /* INSTANCE_EVENT_HOOKS */]: {\r\n        message: event => `\"${event}\" lifecycle events are no longer supported. From templates, ` +\r\n            `use the \"vnode\" prefix instead of \"hook:\". For example, @${event} ` +\r\n            `should be changed to @vnode-${event.slice(5)}. ` +\r\n            `From JavaScript, use Composition API to dynamically register lifecycle ` +\r\n            `hooks.`,\r\n        link: `https://v3.vuejs.org/guide/migration/vnode-lifecycle-events.html`\r\n    },\r\n    [\"INSTANCE_CHILDREN\" /* INSTANCE_CHILDREN */]: {\r\n        message: `vm.$children has been removed. Consider refactoring your logic ` +\r\n            `to avoid relying on direct access to child components.`,\r\n        link: `https://v3.vuejs.org/guide/migration/children.html`\r\n    },\r\n    [\"INSTANCE_LISTENERS\" /* INSTANCE_LISTENERS */]: {\r\n        message: `vm.$listeners has been removed. In Vue 3, parent v-on listeners are ` +\r\n            `included in vm.$attrs and it is no longer necessary to separately use ` +\r\n            `v-on=\"$listeners\" if you are already using v-bind=\"$attrs\". ` +\r\n            `(Note: the Vue 3 behavior only applies if this compat config is disabled)`,\r\n        link: `https://v3.vuejs.org/guide/migration/listeners-removed.html`\r\n    },\r\n    [\"INSTANCE_SCOPED_SLOTS\" /* INSTANCE_SCOPED_SLOTS */]: {\r\n        message: `vm.$scopedSlots has been removed. Use vm.$slots instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/slots-unification.html`\r\n    },\r\n    [\"INSTANCE_ATTRS_CLASS_STYLE\" /* INSTANCE_ATTRS_CLASS_STYLE */]: {\r\n        message: componentName => `Component <${componentName ||\r\n            'Anonymous'}> has \\`inheritAttrs: false\\` but is ` +\r\n            `relying on class/style fallthrough from parent. In Vue 3, class/style ` +\r\n            `are now included in $attrs and will no longer fallthrough when ` +\r\n            `inheritAttrs is false. If you are already using v-bind=\"$attrs\" on ` +\r\n            `component root it should render the same end result. ` +\r\n            `If you are binding $attrs to a non-root element and expecting ` +\r\n            `class/style to fallthrough on root, you will need to now manually bind ` +\r\n            `them on root via :class=\"$attrs.class\".`,\r\n        link: `https://v3.vuejs.org/guide/migration/attrs-includes-class-style.html`\r\n    },\r\n    [\"OPTIONS_DATA_FN\" /* OPTIONS_DATA_FN */]: {\r\n        message: `The \"data\" option can no longer be a plain object. ` +\r\n            `Always use a function.`,\r\n        link: `https://v3.vuejs.org/guide/migration/data-option.html`\r\n    },\r\n    [\"OPTIONS_DATA_MERGE\" /* OPTIONS_DATA_MERGE */]: {\r\n        message: (key) => `Detected conflicting key \"${key}\" when merging data option values. ` +\r\n            `In Vue 3, data keys are merged shallowly and will override one another.`,\r\n        link: `https://v3.vuejs.org/guide/migration/data-option.html#mixin-merge-behavior-change`\r\n    },\r\n    [\"OPTIONS_BEFORE_DESTROY\" /* OPTIONS_BEFORE_DESTROY */]: {\r\n        message: `\\`beforeDestroy\\` has been renamed to \\`beforeUnmount\\`.`\r\n    },\r\n    [\"OPTIONS_DESTROYED\" /* OPTIONS_DESTROYED */]: {\r\n        message: `\\`destroyed\\` has been renamed to \\`unmounted\\`.`\r\n    },\r\n    [\"WATCH_ARRAY\" /* WATCH_ARRAY */]: {\r\n        message: `\"watch\" option or vm.$watch on an array value will no longer ` +\r\n            `trigger on array mutation unless the \"deep\" option is specified. ` +\r\n            `If current usage is intended, you can disable the compat behavior and ` +\r\n            `suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"WATCH_ARRAY\" /* WATCH_ARRAY */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/watch.html`\r\n    },\r\n    [\"PROPS_DEFAULT_THIS\" /* PROPS_DEFAULT_THIS */]: {\r\n        message: (key) => `props default value function no longer has access to \"this\". The compat ` +\r\n            `build only offers access to this.$options.` +\r\n            `(found in prop \"${key}\")`,\r\n        link: `https://v3.vuejs.org/guide/migration/props-default-this.html`\r\n    },\r\n    [\"CUSTOM_DIR\" /* CUSTOM_DIR */]: {\r\n        message: (legacyHook, newHook) => `Custom directive hook \"${legacyHook}\" has been removed. ` +\r\n            `Use \"${newHook}\" instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/custom-directives.html`\r\n    },\r\n    [\"V_FOR_REF\" /* V_FOR_REF */]: {\r\n        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` +\r\n            `Consider using function refs or refactor to avoid ref usage altogether.`,\r\n        link: `https://v3.vuejs.org/guide/migration/array-refs.html`\r\n    },\r\n    [\"V_ON_KEYCODE_MODIFIER\" /* V_ON_KEYCODE_MODIFIER */]: {\r\n        message: `Using keyCode as v-on modifier is no longer supported. ` +\r\n            `Use kebab-case key name modifiers instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`\r\n    },\r\n    [\"ATTR_FALSE_VALUE\" /* ATTR_FALSE_VALUE */]: {\r\n        message: (name) => `Attribute \"${name}\" with v-bind value \\`false\\` will render ` +\r\n            `${name}=\"false\" instead of removing it in Vue 3. To remove the attribute, ` +\r\n            `use \\`null\\` or \\`undefined\\` instead. If the usage is intended, ` +\r\n            `you can disable the compat behavior and suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"ATTR_FALSE_VALUE\" /* ATTR_FALSE_VALUE */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`\r\n    },\r\n    [\"ATTR_ENUMERATED_COERCION\" /* ATTR_ENUMERATED_COERCION */]: {\r\n        message: (name, value, coerced) => `Enumerated attribute \"${name}\" with v-bind value \\`${value}\\` will ` +\r\n            `${value === null ? `be removed` : `render the value as-is`} instead of coercing the value to \"${coerced}\" in Vue 3. ` +\r\n            `Always use explicit \"true\" or \"false\" values for enumerated attributes. ` +\r\n            `If the usage is intended, ` +\r\n            `you can disable the compat behavior and suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"ATTR_ENUMERATED_COERCION\" /* ATTR_ENUMERATED_COERCION */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`\r\n    },\r\n    [\"TRANSITION_CLASSES\" /* TRANSITION_CLASSES */]: {\r\n        message: `` // this feature cannot be runtime-detected\r\n    },\r\n    [\"TRANSITION_GROUP_ROOT\" /* TRANSITION_GROUP_ROOT */]: {\r\n        message: `<TransitionGroup> no longer renders a root <span> element by ` +\r\n            `default if no \"tag\" prop is specified. If you do not rely on the span ` +\r\n            `for styling, you can disable the compat behavior and suppress this ` +\r\n            `warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"TRANSITION_GROUP_ROOT\" /* TRANSITION_GROUP_ROOT */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/transition-group.html`\r\n    },\r\n    [\"COMPONENT_ASYNC\" /* COMPONENT_ASYNC */]: {\r\n        message: (comp) => {\r\n            const name = getComponentName(comp);\r\n            return (`Async component${name ? ` <${name}>` : `s`} should be explicitly created via \\`defineAsyncComponent()\\` ` +\r\n                `in Vue 3. Plain functions will be treated as functional components in ` +\r\n                `non-compat build. If you have already migrated all async component ` +\r\n                `usage and intend to use plain functions for functional components, ` +\r\n                `you can disable the compat behavior and suppress this ` +\r\n                `warning with:` +\r\n                `\\n\\n  configureCompat({ ${\"COMPONENT_ASYNC\" /* COMPONENT_ASYNC */}: false })\\n`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/async-components.html`\r\n    },\r\n    [\"COMPONENT_FUNCTIONAL\" /* COMPONENT_FUNCTIONAL */]: {\r\n        message: (comp) => {\r\n            const name = getComponentName(comp);\r\n            return (`Functional component${name ? ` <${name}>` : `s`} should be defined as a plain function in Vue 3. The \"functional\" ` +\r\n                `option has been removed. NOTE: Before migrating to use plain ` +\r\n                `functions for functional components, first make sure that all async ` +\r\n                `components usage have been migrated and its compat behavior has ` +\r\n                `been disabled.`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/functional-components.html`\r\n    },\r\n    [\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */]: {\r\n        message: (comp) => {\r\n            const configMsg = `opt-in to ` +\r\n                `Vue 3 behavior on a per-component basis with \\`compatConfig: { ${\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */}: false }\\`.`;\r\n            if (comp.props &&\r\n                (isArray(comp.props)\r\n                    ? comp.props.includes('modelValue')\r\n                    : hasOwn(comp.props, 'modelValue'))) {\r\n                return (`Component delcares \"modelValue\" prop, which is Vue 3 usage, but ` +\r\n                    `is running under Vue 2 compat v-model behavior. You can ${configMsg}`);\r\n            }\r\n            return (`v-model usage on component has changed in Vue 3. Component that expects ` +\r\n                `to work with v-model should now use the \"modelValue\" prop and emit the ` +\r\n                `\"update:modelValue\" event. You can update the usage and then ${configMsg}`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/v-model.html`\r\n    },\r\n    [\"RENDER_FUNCTION\" /* RENDER_FUNCTION */]: {\r\n        message: `Vue 3's render function API has changed. ` +\r\n            `You can opt-in to the new API with:` +\r\n            `\\n\\n  configureCompat({ ${\"RENDER_FUNCTION\" /* RENDER_FUNCTION */}: false })\\n` +\r\n            `\\n  (This can also be done per-component via the \"compatConfig\" option.)`,\r\n        link: `https://v3.vuejs.org/guide/migration/render-function-api.html`\r\n    },\r\n    [\"FILTERS\" /* FILTERS */]: {\r\n        message: `filters have been removed in Vue 3. ` +\r\n            `The \"|\" symbol will be treated as native JavaScript bitwise OR operator. ` +\r\n            `Use method calls or computed properties instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/filters.html`\r\n    },\r\n    [\"PRIVATE_APIS\" /* PRIVATE_APIS */]: {\r\n        message: name => `\"${name}\" is a Vue 2 private API that no longer exists in Vue 3. ` +\r\n            `If you are seeing this warning only due to a dependency, you can ` +\r\n            `suppress this warning via { PRIVATE_APIS: 'supress-warning' }.`\r\n    }\r\n};\r\nconst instanceWarned = Object.create(null);\r\nconst warnCount = Object.create(null);\r\nfunction warnDeprecation(key, instance, ...args) {\r\n    if (!(process.env.NODE_ENV !== 'production')) {\r\n        return;\r\n    }\r\n    instance = instance || getCurrentInstance();\r\n    // check user config\r\n    const config = getCompatConfigForKey(key, instance);\r\n    if (config === 'suppress-warning') {\r\n        return;\r\n    }\r\n    const dupKey = key + args.join('');\r\n    let compId = instance && formatComponentName(instance, instance.type);\r\n    if (compId === 'Anonymous' && instance) {\r\n        compId = instance.uid;\r\n    }\r\n    // skip if the same warning is emitted for the same component type\r\n    const componentDupKey = dupKey + compId;\r\n    if (componentDupKey in instanceWarned) {\r\n        return;\r\n    }\r\n    instanceWarned[componentDupKey] = true;\r\n    // same warning, but different component. skip the long message and just\r\n    // log the key and count.\r\n    if (dupKey in warnCount) {\r\n        warn(`(deprecation ${key}) (${++warnCount[dupKey] + 1})`);\r\n        return;\r\n    }\r\n    warnCount[dupKey] = 0;\r\n    const { message, link } = deprecationData[key];\r\n    warn(`(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\\n  Details: ${link}` : ``}`);\r\n    if (!isCompatEnabled(key, instance, true)) {\r\n        console.error(`^ The above deprecation's compat behavior is disabled and will likely ` +\r\n            `lead to runtime errors.`);\r\n    }\r\n}\r\nconst globalCompatConfig = {\r\n    MODE: 2\r\n};\r\nfunction getCompatConfigForKey(key, instance) {\r\n    const instanceConfig = instance && instance.type.compatConfig;\r\n    if (instanceConfig && key in instanceConfig) {\r\n        return instanceConfig[key];\r\n    }\r\n    return globalCompatConfig[key];\r\n}\r\nfunction isCompatEnabled(key, instance, enableForBuiltIn = false) {\r\n    // skip compat for built-in components\r\n    if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) {\r\n        return false;\r\n    }\r\n    const rawMode = getCompatConfigForKey('MODE', instance) || 2;\r\n    const val = getCompatConfigForKey(key, instance);\r\n    const mode = isFunction$1(rawMode)\r\n        ? rawMode(instance && instance.type)\r\n        : rawMode;\r\n    if (mode === 2) {\r\n        return val !== false;\r\n    }\r\n    else {\r\n        return val === true || val === 'suppress-warning';\r\n    }\r\n}\n\nfunction emit(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { emitsOptions, propsOptions: [propsOptions] } = instance;\r\n        if (emitsOptions) {\r\n            if (!(event in emitsOptions) &&\r\n                !(false )) {\r\n                if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {\r\n                    warn(`Component emitted event \"${event}\" but it is neither declared in ` +\r\n                        `the emits option nor as an \"${toHandlerKey(event)}\" prop.`);\r\n                }\r\n            }\r\n            else {\r\n                const validator = emitsOptions[event];\r\n                if (isFunction$1(validator)) {\r\n                    const isValid = validator(...rawArgs);\r\n                    if (!isValid) {\r\n                        warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith('update:');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentEmit(instance, event, args);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {\r\n            warn(`Event \"${lowerCaseEvent}\" is emitted in component ` +\r\n                `${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". ` +\r\n                `Note that HTML attributes are case-insensitive and you cannot use ` +\r\n                `v-on to listen to camelCase events when using in-DOM templates. ` +\r\n                `You should probably use \"${hyphenate(event)}\" instead of \"${event}\".`);\r\n        }\r\n    }\r\n    let handlerName;\r\n    let handler = props[(handlerName = toHandlerKey(event))] ||\r\n        // also try camelCase event handler (#2249)\r\n        props[(handlerName = toHandlerKey(camelize(event)))];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handler = props[(handlerName = toHandlerKey(hyphenate(event)))];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            instance.emitted = {};\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        instance.emitted[handlerName] = true;\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.emitsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached !== undefined) {\r\n        return cached;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendEmits = (raw) => {\r\n            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);\r\n            if (normalizedFromExtend) {\r\n                hasExtends = true;\r\n                extend(normalized, normalizedFromExtend);\r\n            }\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, null);\r\n        return null;\r\n    }\r\n    if (isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        extend(normalized, raw);\r\n    }\r\n    cache.set(comp, normalized);\r\n    return normalized;\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.slice(2).replace(/Once$/, '');\r\n    return (hasOwn(options, key[0].toLowerCase() + key.slice(1)) ||\r\n        hasOwn(options, hyphenate(key)) ||\r\n        hasOwn(options, key));\r\n}\n\n/**\r\n * mark the current rendering instance for asset resolution (e.g.\r\n * resolveComponent, resolveDirective) during render\r\n */\r\nlet currentRenderingInstance = null;\r\nlet currentScopeId = null;\r\n/**\r\n * Note: rendering calls maybe nested. The function returns the parent rendering\r\n * instance if present, which should be restored after the render is done:\r\n *\r\n * ```js\r\n * const prev = setCurrentRenderingInstance(i)\r\n * // ...render\r\n * setCurrentRenderingInstance(prev)\r\n * ```\r\n */\r\nfunction setCurrentRenderingInstance(instance) {\r\n    const prev = currentRenderingInstance;\r\n    currentRenderingInstance = instance;\r\n    currentScopeId = (instance && instance.type.__scopeId) || null;\r\n    return prev;\r\n}\r\n/**\r\n * Set scope id when creating hoisted vnodes.\r\n * @private compiler helper\r\n */\r\nfunction pushScopeId(id) {\r\n    currentScopeId = id;\r\n}\r\n/**\r\n * Technically we no longer need this after 3.0.8 but we need to keep the same\r\n * API for backwards compat w/ code generated by compilers.\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    currentScopeId = null;\r\n}\r\n/**\r\n * Only for backwards compat\r\n * @private\r\n */\r\nconst withScopeId = (_id) => withCtx;\r\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private compiler helper\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only\r\n) {\r\n    if (!ctx)\r\n        return fn;\r\n    // already normalized\r\n    if (fn._n) {\r\n        return fn;\r\n    }\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we disable block tracking and\r\n        // force bail out when invoking a compiled slot (indicated by the ._d flag).\r\n        // This isn't necessary if rendering a compiled `<slot>`, so we flip the\r\n        // ._d flag off when invoking the wrapped fn inside `renderSlot`.\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(-1);\r\n        }\r\n        const prevInstance = setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(prevInstance);\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(1);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentUpdated(ctx);\r\n        }\r\n        return res;\r\n    };\r\n    // mark normalized to avoid duplicated wrapping\r\n    renderFnWithContext._n = true;\r\n    // mark this as compiled by default\r\n    // this is used in vnode.ts -> normalizeChildren() to set the slot\r\n    // rendering flag.\r\n    renderFnWithContext._c = true;\r\n    // disable block tracking by default\r\n    renderFnWithContext._d = true;\r\n    return renderFnWithContext;\r\n}\n\n/**\r\n * dev only flag to track whether $attrs was used during render.\r\n * If $attrs was used during render then the warning for failed attrs\r\n * fallthrough can be suppressed.\r\n */\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;\r\n    let result;\r\n    const prev = setCurrentRenderingInstance(instance);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        let fallthroughAttrs;\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if ((process.env.NODE_ENV !== 'production') && attrs === props) {\r\n                markAttrsAccessed();\r\n            }\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, (process.env.NODE_ENV !== 'production')\r\n                    ? {\r\n                        get attrs() {\r\n                            markAttrsAccessed();\r\n                            return attrs;\r\n                        },\r\n                        slots,\r\n                        emit\r\n                    }\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn't need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n        // attr merging\r\n        // in dev mode, comments are preserved, and it's possible for a template\r\n        // to have comments along side the root element which makes it a fragment\r\n        let root = result;\r\n        let setRoot = undefined;\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            result.patchFlag > 0 &&\r\n            result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n            ;\r\n            [root, setRoot] = getChildRoot(result);\r\n        }\r\n        if (fallthroughAttrs && inheritAttrs !== false) {\r\n            const keys = Object.keys(fallthroughAttrs);\r\n            const { shapeFlag } = root;\r\n            if (keys.length) {\r\n                if (shapeFlag & 1 /* ELEMENT */ ||\r\n                    shapeFlag & 6 /* COMPONENT */) {\r\n                    if (propsOptions && keys.some(isModelListener)) {\r\n                        // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                        // prop, it indicates this component expects to handle v-model and\r\n                        // it should not fallthrough.\r\n                        // related: #1543, #1643, #1989\r\n                        fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                    }\r\n                    root = cloneVNode(root, fallthroughAttrs);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production') && !accessedAttrs && root.type !== Comment$1) {\r\n                    const allAttrs = Object.keys(attrs);\r\n                    const eventAttrs = [];\r\n                    const extraAttrs = [];\r\n                    for (let i = 0, l = allAttrs.length; i < l; i++) {\r\n                        const key = allAttrs[i];\r\n                        if (isOn(key)) {\r\n                            // ignore v-model handlers when they fail to fallthrough\r\n                            if (!isModelListener(key)) {\r\n                                // remove `on`, lowercase first letter to reflect event casing\r\n                                // accurately\r\n                                eventAttrs.push(key[2].toLowerCase() + key.slice(3));\r\n                            }\r\n                        }\r\n                        else {\r\n                            extraAttrs.push(key);\r\n                        }\r\n                    }\r\n                    if (extraAttrs.length) {\r\n                        warn(`Extraneous non-props attributes (` +\r\n                            `${extraAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes.`);\r\n                    }\r\n                    if (eventAttrs.length) {\r\n                        warn(`Extraneous non-emits event listeners (` +\r\n                            `${eventAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes. ` +\r\n                            `If the listener is intended to be a component custom event listener only, ` +\r\n                            `declare it using the \"emits\" option.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (false &&\r\n            isCompatEnabled(\"INSTANCE_ATTRS_CLASS_STYLE\" /* INSTANCE_ATTRS_CLASS_STYLE */, instance) &&\r\n            vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ &&\r\n            (root.shapeFlag & 1 /* ELEMENT */ ||\r\n                root.shapeFlag & 6 /* COMPONENT */)) ;\r\n        // inherit directives\r\n        if (vnode.dirs) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Runtime directive used on component with non-element root node. ` +\r\n                    `The directives will not function as intended.`);\r\n            }\r\n            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n        }\r\n        // inherit transition data\r\n        if (vnode.transition) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Component inside <Transition> renders non-element root node ` +\r\n                    `that cannot be animated.`);\r\n            }\r\n            root.transition = vnode.transition;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && setRoot) {\r\n            setRoot(root);\r\n        }\r\n        else {\r\n            result = root;\r\n        }\r\n    }\r\n    catch (err) {\r\n        blockStack.length = 0;\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment$1);\r\n    }\r\n    setCurrentRenderingInstance(prev);\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\nfunction filterSingleRoot(children) {\r\n    let singleRoot;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (isVNode(child)) {\r\n            // ignore user comment\r\n            if (child.type !== Comment$1 || child.children === 'v-if') {\r\n                if (singleRoot) {\r\n                    // has more than 1 non-comment child, return now\r\n                    return;\r\n                }\r\n                else {\r\n                    singleRoot = child;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    return singleRoot;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === 'class' || key === 'style' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & 6 /* COMPONENT */ ||\r\n        vnode.shapeFlag & 1 /* ELEMENT */ ||\r\n        vnode.type === Comment$1 // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component's render function was hot-updated. Since this may have\r\n    // caused the child component's slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if ((process.env.NODE_ENV !== 'production') && (prevChildren || nextChildren) && isHmrUpdating) {\r\n        return true;\r\n    }\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag >= 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it's a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    name: 'Suspense',\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode's type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary,\r\n    normalize: normalizeSuspenseChildren\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = (SuspenseImpl\r\n    );\r\nfunction triggerEvent(vnode, name) {\r\n    const eventListener = vnode.props && vnode.props[name];\r\n    if (isFunction$1(eventListener)) {\r\n        eventListener();\r\n    }\r\n}\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement('div');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // invoke @fallback event\r\n        triggerEvent(vnode, 'onPending');\r\n        triggerEvent(vnode, 'onFallback');\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, slotScopeIds);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement('div');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG, slotScopeIds, optimized);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled \"back\" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            triggerEvent(n2, 'onPending');\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !false && !hasWarned) {\r\n        hasWarned = true;\r\n        // @ts-ignore `console.info` cannot be null error\r\n        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\r\n    }\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === 'number' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!resume && !suspense.pendingBranch) {\r\n                    throw new Error(`suspense.resolve() is called without a pending branch.`);\r\n                }\r\n                if (suspense.isUnmounted) {\r\n                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\r\n                }\r\n            }\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === 'out-in';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            triggerEvent(vnode, 'onResolve');\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            triggerEvent(vnode, 'onFallback');\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            suspense.isInFallback = true;\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            const isInPendingSuspense = !!suspense.pendingBranch;\r\n            if (isInPendingSuspense) {\r\n                suspense.deps++;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(vnode);\r\n                }\r\n                handleSetupResult(instance, asyncSetupResult, false);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                // only decrease deps count if suspense is not already resolved\r\n                if (isInPendingSuspense && --suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don't really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */;\r\n    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\r\n    vnode.ssFallback = isSlotChildren\r\n        ? normalizeSuspenseSlot(children.fallback)\r\n        : createVNode(Comment);\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    let block;\r\n    if (isFunction$1(s)) {\r\n        const isCompiledSlot = s._c;\r\n        if (isCompiledSlot) {\r\n            // disableTracking: false\r\n            // allow block tracking for compiled slots\r\n            // (see ./componentRenderContext.ts)\r\n            s._d = false;\r\n            openBlock();\r\n        }\r\n        s = s();\r\n        if (isCompiledSlot) {\r\n            s._d = true;\r\n            block = currentBlock;\r\n            closeBlock();\r\n        }\r\n    }\r\n    if (isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if ((process.env.NODE_ENV !== 'production') && !singleChild) {\r\n            warn(`<Suspense> slots expect a single root node.`);\r\n        }\r\n        s = singleChild;\r\n    }\r\n    s = normalizeVNode(s);\r\n    if (block) {\r\n        s.dynamicChildren = block.filter(c => c !== s);\r\n    }\r\n    return s;\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the intance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction$1(defaultValue)\r\n                ? defaultValue.call(instance.proxy)\r\n                : defaultValue;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`inject() can only be used inside setup() or functional components.`);\r\n    }\r\n}\n\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction$1(cb)) {\r\n        warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` +\r\n            `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` +\r\n            `supports \\`watch(source, cb, options?) signature.`);\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ, instance = currentInstance) {\r\n    if ((process.env.NODE_ENV !== 'production') && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn(`watch() \"immediate\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n        if (deep !== undefined) {\r\n            warn(`watch() \"deep\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n    }\r\n    const warnInvalidSource = (s) => {\r\n        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    let getter;\r\n    let forceTrigger = false;\r\n    let isMultiSource = false;\r\n    if (isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = !!source._shallow;\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        isMultiSource = true;\r\n        forceTrigger = source.some(isReactive);\r\n        getter = () => source.map(s => {\r\n            if (isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (isFunction$1(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);\r\n            }\r\n            else {\r\n                (process.env.NODE_ENV !== 'production') && warnInvalidSource(s);\r\n            }\r\n        });\r\n    }\r\n    else if (isFunction$1(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onInvalidate]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = NOOP;\r\n        (process.env.NODE_ENV !== 'production') && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    let onInvalidate = (fn) => {\r\n        cleanup = runner.options.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!runner.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = runner();\r\n            if (deep ||\r\n                forceTrigger ||\r\n                (isMultiSource\r\n                    ? newValue.some((v, i) => hasChanged(v, oldValue[i]))\r\n                    : hasChanged(newValue, oldValue)) ||\r\n                (false  )) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onInvalidate\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            runner();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = job; // the scheduler function gets called directly\r\n    }\r\n    else if (flush === 'post') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: 'pre'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        onTrack,\r\n        onTrigger,\r\n        scheduler\r\n    });\r\n    recordInstanceBoundEffect(runner, instance);\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = runner();\r\n        }\r\n    }\r\n    else if (flush === 'post') {\r\n        queuePostRenderEffect(runner, instance && instance.suspense);\r\n    }\r\n    else {\r\n        runner();\r\n    }\r\n    return () => {\r\n        stop(runner);\r\n        if (instance) {\r\n            remove(instance.effects, runner);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, value, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = isString(source)\r\n        ? source.includes('.')\r\n            ? createPathGetter(publicThis, source)\r\n            : () => publicThis[source]\r\n        : source.bind(publicThis, publicThis);\r\n    let cb;\r\n    if (isFunction$1(value)) {\r\n        cb = value;\r\n    }\r\n    else {\r\n        cb = value.handler;\r\n        options = value;\r\n    }\r\n    return doWatch(getter, cb.bind(publicThis), options, this);\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split('.');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction traverse(value, seen = new Set()) {\r\n    if (!isObject$1(value) || value[\"__v_skip\" /* SKIP */]) {\r\n        return value;\r\n    }\r\n    seen = seen || new Set();\r\n    if (seen.has(value)) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else if (isPlainObject(value)) {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if ((process.env.NODE_ENV !== 'production') && children.length > 1) {\r\n                warn('<transition> can only be used on a single element or component. Use ' +\r\n                    '<transition-group> for lists.');\r\n            }\r\n            // there's no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if ((process.env.NODE_ENV !== 'production') && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\r\n                warn(`invalid <transition> mode: ${mode}`);\r\n            }\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== Comment$1 &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree's hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === 'out-in') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === 'in-out' && innerChild.type !== Comment$1) {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== Comment$1) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-op\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return isFunction$1(options) ? { setup: options, name: options.name } : options;\r\n}\n\nconst isAsyncWrapper = (i) => !!i.type.__asyncLoader;\r\nfunction defineAsyncComponent(source) {\r\n    if (isFunction$1(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest = loader()\r\n                .catch(err => {\r\n                err = err instanceof Error ? err : new Error(String(err));\r\n                if (userOnError) {\r\n                    return new Promise((resolve, reject) => {\r\n                        const userRetry = () => resolve(retry());\r\n                        const userFail = () => reject(err);\r\n                        userOnError(err, userRetry, userFail, retries + 1);\r\n                    });\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            })\r\n                .then((comp) => {\r\n                if (thisRequest !== pendingRequest && pendingRequest) {\r\n                    return pendingRequest;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && !comp) {\r\n                    warn(`Async component loader resolved to undefined. ` +\r\n                        `If you are using retry(), make sure to return its return value.`);\r\n                }\r\n                // interop module default\r\n                if (comp &&\r\n                    (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                    comp = comp.default;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && comp && !isObject$1(comp) && !isFunction$1(comp)) {\r\n                    throw new Error(`Invalid async component load result: ${comp}`);\r\n                }\r\n                resolvedComp = comp;\r\n                return comp;\r\n            })));\r\n    };\r\n    return defineComponent({\r\n        name: 'AsyncComponentWrapper',\r\n        __asyncLoader: load,\r\n        get __asyncResolved() {\r\n            return resolvedComp;\r\n        },\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if ((suspensible && instance.suspense) ||\r\n                (false )) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = ref(false);\r\n            const error = ref();\r\n            const delayed = ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n                if (instance.parent && isKeepAlive(instance.parent.vnode)) {\r\n                    // parent is keep-alive, force update so the loaded component's\r\n                    // name is taken into account\r\n                    queueJob(instance.parent.update);\r\n                }\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { ref, props, children } }) {\r\n    const vnode = createVNode(comp, props, children);\r\n    // ensure inner component inherits the async wrapper's ref owner\r\n    vnode.ref = ref;\r\n    return vnode;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        // if the internal renderer is not registered, it indicates that this is server-side rendering,\r\n        // for KeepAlive, we just need to render its children\r\n        if (!sharedContext.renderer) {\r\n            return slots.default;\r\n        }\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.__v_cache = cache;\r\n        }\r\n        const parentSuspense = instance.suspense;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement('div');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getComponentName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can't unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: 'post', deep: true });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        onMounted(cacheSubtree);\r\n        onUpdated(cacheSubtree);\r\n        onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive's unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`KeepAlive should contain exactly one component child.`);\r\n                }\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            // for async components, name check should be based in its loaded\r\n            // inner component if available\r\n            const name = getComponentName(isAsyncWrapper(vnode)\r\n                ? vnode.type.__asyncResolved || {}\r\n                : comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it's reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it's possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (isString(pattern)) {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"a\" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"da\" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\r\n    // deactivation check\".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                setCurrentInstance(null);\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            (` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\r\n(!isInSSRComponentSetup || lifecycle === \"sp\" /* SERVER_PREFETCH */) &&\r\n    injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onServerPrefetch = createHook(\"sp\" /* SERVER_PREFETCH */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nfunction onErrorCaptured(hook, target = currentInstance) {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet shouldCacheAccess = true;\r\nfunction applyOptions(instance) {\r\n    const options = resolveMergedOptions(instance);\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    // do not cache property access on public proxy during state initialization\r\n    shouldCacheAccess = false;\r\n    // call beforeCreate first before accessing other options since\r\n    // the hook may mutate resolved options (#2791)\r\n    if (options.beforeCreate) {\r\n        callHook(options.beforeCreate, instance, \"bc\" /* BEFORE_CREATE */);\r\n    }\r\n    const { \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // lifecycle\r\n    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, \r\n    // public API\r\n    expose, inheritAttrs, \r\n    // assets\r\n    components, directives, filters } = options;\r\n    const checkDuplicateProperties = (process.env.NODE_ENV !== 'production') ? createDuplicateChecker() : null;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const [propsOptions] = instance.propsOptions;\r\n        if (propsOptions) {\r\n            for (const key in propsOptions) {\r\n                checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n            }\r\n        }\r\n    }\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        resolveInjections(injectOptions, ctx, checkDuplicateProperties);\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction$1(methodHandler)) {\r\n                // In dev mode, we use the `createRenderContext` function to define methods to the proxy target,\r\n                // and those are read-only but reconfigurable, so it needs to be redefined here\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    Object.defineProperty(ctx, key, {\r\n                        value: methodHandler.bind(publicThis),\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        writable: true\r\n                    });\r\n                }\r\n                else {\r\n                    ctx[key] = methodHandler.bind(publicThis);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                }\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (dataOptions) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isFunction$1(dataOptions)) {\r\n            warn(`The data option must be a function. ` +\r\n                `Plain object usage is no longer supported.`);\r\n        }\r\n        const data = dataOptions.call(publicThis, publicThis);\r\n        if ((process.env.NODE_ENV !== 'production') && isPromise$1(data)) {\r\n            warn(`data() returned a Promise - note data() cannot be async; If you ` +\r\n                `intend to perform data fetching before component renders, use ` +\r\n                `async setup() + <Suspense>.`);\r\n        }\r\n        if (!isObject$1(data)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`data() should return an object.`);\r\n        }\r\n        else {\r\n            instance.data = reactive(data);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                for (const key in data) {\r\n                    checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                    // expose data on ctx during dev\r\n                    if (key[0] !== '$' && key[0] !== '_') {\r\n                        Object.defineProperty(ctx, key, {\r\n                            configurable: true,\r\n                            enumerable: true,\r\n                            get: () => data[key],\r\n                            set: NOOP\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // state initialization complete at this point - start caching access\r\n    shouldCacheAccess = true;\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = isFunction$1(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : isFunction$1(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : NOOP;\r\n            if ((process.env.NODE_ENV !== 'production') && get === NOOP) {\r\n                warn(`Computed property \"${key}\" has no getter.`);\r\n            }\r\n            const set = !isFunction$1(opt) && isFunction$1(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : (process.env.NODE_ENV !== 'production')\r\n                    ? () => {\r\n                        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\r\n                    }\r\n                    : NOOP;\r\n            const c = computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        for (const key in watchOptions) {\r\n            createWatcher(watchOptions[key], ctx, publicThis, key);\r\n        }\r\n    }\r\n    if (provideOptions) {\r\n        const provides = isFunction$1(provideOptions)\r\n            ? provideOptions.call(publicThis)\r\n            : provideOptions;\r\n        Reflect.ownKeys(provides).forEach(key => {\r\n            provide(key, provides[key]);\r\n        });\r\n    }\r\n    if (created) {\r\n        callHook(created, instance, \"c\" /* CREATED */);\r\n    }\r\n    function registerLifecycleHook(register, hook) {\r\n        if (isArray(hook)) {\r\n            hook.forEach(_hook => register(_hook.bind(publicThis)));\r\n        }\r\n        else if (hook) {\r\n            register(hook.bind(publicThis));\r\n        }\r\n    }\r\n    registerLifecycleHook(onBeforeMount, beforeMount);\r\n    registerLifecycleHook(onMounted, mounted);\r\n    registerLifecycleHook(onBeforeUpdate, beforeUpdate);\r\n    registerLifecycleHook(onUpdated, updated);\r\n    registerLifecycleHook(onActivated, activated);\r\n    registerLifecycleHook(onDeactivated, deactivated);\r\n    registerLifecycleHook(onErrorCaptured, errorCaptured);\r\n    registerLifecycleHook(onRenderTracked, renderTracked);\r\n    registerLifecycleHook(onRenderTriggered, renderTriggered);\r\n    registerLifecycleHook(onBeforeUnmount, beforeUnmount);\r\n    registerLifecycleHook(onUnmounted, unmounted);\r\n    registerLifecycleHook(onServerPrefetch, serverPrefetch);\r\n    if (isArray(expose)) {\r\n        if (expose.length) {\r\n            const exposed = instance.exposed || (instance.exposed = {});\r\n            expose.forEach(key => {\r\n                Object.defineProperty(exposed, key, {\r\n                    get: () => publicThis[key],\r\n                    set: val => (publicThis[key] = val)\r\n                });\r\n            });\r\n        }\r\n        else if (!instance.exposed) {\r\n            instance.exposed = {};\r\n        }\r\n    }\r\n    // options that are handled when creating the instance but also need to be\r\n    // applied from mixins\r\n    if (render && instance.render === NOOP) {\r\n        instance.render = render;\r\n    }\r\n    if (inheritAttrs != null) {\r\n        instance.inheritAttrs = inheritAttrs;\r\n    }\r\n    // asset options.\r\n    if (components)\r\n        instance.components = components;\r\n    if (directives)\r\n        instance.directives = directives;\r\n}\r\nfunction resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {\r\n    if (isArray(injectOptions)) {\r\n        injectOptions = normalizeInject(injectOptions);\r\n    }\r\n    for (const key in injectOptions) {\r\n        const opt = injectOptions[key];\r\n        if (isObject$1(opt)) {\r\n            if ('default' in opt) {\r\n                ctx[key] = inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n            }\r\n            else {\r\n                ctx[key] = inject(opt.from || key);\r\n            }\r\n        }\r\n        else {\r\n            ctx[key] = inject(opt);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n        }\r\n    }\r\n}\r\nfunction callHook(hook, instance, type) {\r\n    callWithAsyncErrorHandling(isArray(hook)\r\n        ? hook.map(h => h.bind(instance.proxy))\r\n        : hook.bind(instance.proxy), instance, type);\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes('.')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (isFunction$1(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction$1(raw)) {\r\n        watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (isObject$1(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = isFunction$1(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (isFunction$1(handler)) {\r\n                watch(getter, handler, raw);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\r\n            }\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid watch option: \"${key}\"`, raw);\r\n    }\r\n}\r\n/**\r\n * Resolve merged options and cache it on the component.\r\n * This is done only once per-component since the merging does not involve\r\n * instances.\r\n */\r\nfunction resolveMergedOptions(instance) {\r\n    const base = instance.type;\r\n    const { mixins, extends: extendsOptions } = base;\r\n    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;\r\n    const cached = cache.get(base);\r\n    let resolved;\r\n    if (cached) {\r\n        resolved = cached;\r\n    }\r\n    else if (!globalMixins.length && !mixins && !extendsOptions) {\r\n        {\r\n            resolved = base;\r\n        }\r\n    }\r\n    else {\r\n        resolved = {};\r\n        if (globalMixins.length) {\r\n            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));\r\n        }\r\n        mergeOptions(resolved, base, optionMergeStrategies);\r\n    }\r\n    cache.set(base, resolved);\r\n    return resolved;\r\n}\r\nfunction mergeOptions(to, from, strats, asMixin = false) {\r\n    const { mixins, extends: extendsOptions } = from;\r\n    if (extendsOptions) {\r\n        mergeOptions(to, extendsOptions, strats, true);\r\n    }\r\n    if (mixins) {\r\n        mixins.forEach((m) => mergeOptions(to, m, strats, true));\r\n    }\r\n    for (const key in from) {\r\n        if (asMixin && key === 'expose') {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`\"expose\" option is ignored when declared in mixins or extends. ` +\r\n                    `It should only be declared in the base component itself.`);\r\n        }\r\n        else {\r\n            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);\r\n            to[key] = strat ? strat(to[key], from[key]) : from[key];\r\n        }\r\n    }\r\n    return to;\r\n}\r\nconst internalOptionMergeStrats = {\r\n    data: mergeDataFn,\r\n    props: mergeObjectOptions,\r\n    emits: mergeObjectOptions,\r\n    // objects\r\n    methods: mergeObjectOptions,\r\n    computed: mergeObjectOptions,\r\n    // lifecycle\r\n    beforeCreate: mergeAsArray,\r\n    created: mergeAsArray,\r\n    beforeMount: mergeAsArray,\r\n    mounted: mergeAsArray,\r\n    beforeUpdate: mergeAsArray,\r\n    updated: mergeAsArray,\r\n    beforeDestroy: mergeAsArray,\r\n    destroyed: mergeAsArray,\r\n    activated: mergeAsArray,\r\n    deactivated: mergeAsArray,\r\n    errorCaptured: mergeAsArray,\r\n    serverPrefetch: mergeAsArray,\r\n    // assets\r\n    components: mergeObjectOptions,\r\n    directives: mergeObjectOptions,\r\n    // watch\r\n    watch: mergeWatchOptions,\r\n    // provide / inject\r\n    provide: mergeDataFn,\r\n    inject: mergeInject\r\n};\r\nfunction mergeDataFn(to, from) {\r\n    if (!from) {\r\n        return to;\r\n    }\r\n    if (!to) {\r\n        return from;\r\n    }\r\n    return function mergedDataFn() {\r\n        return (extend)(isFunction$1(to) ? to.call(this, this) : to, isFunction$1(from) ? from.call(this, this) : from);\r\n    };\r\n}\r\nfunction mergeInject(to, from) {\r\n    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));\r\n}\r\nfunction normalizeInject(raw) {\r\n    if (isArray(raw)) {\r\n        const res = {};\r\n        for (let i = 0; i < raw.length; i++) {\r\n            res[raw[i]] = raw[i];\r\n        }\r\n        return res;\r\n    }\r\n    return raw;\r\n}\r\nfunction mergeAsArray(to, from) {\r\n    return to ? [...new Set([].concat(to, from))] : from;\r\n}\r\nfunction mergeObjectOptions(to, from) {\r\n    return to ? extend(extend(Object.create(null), to), from) : from;\r\n}\r\nfunction mergeWatchOptions(to, from) {\r\n    if (!to)\r\n        return from;\r\n    if (!from)\r\n        return to;\r\n    const merged = extend(Object.create(null), to);\r\n    for (const key in from) {\r\n        merged[key] = mergeAsArray(to[key], from[key]);\r\n    }\r\n    return merged;\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    instance.propsDefaults = Object.create(null);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // ensure all declared prop keys are present\r\n    for (const key in instance.propsOptions[0]) {\r\n        if (!(key in props)) {\r\n            props[key] = undefined;\r\n        }\r\n    }\r\n    // validation\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n    !((process.env.NODE_ENV !== 'production') &&\r\n        (instance.type.__hmrId ||\r\n            (instance.parent && instance.parent.type.__hmrId))) &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                let key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (hasOwn(attrs, key)) {\r\n                        if (value !== attrs[key]) {\r\n                            attrs[key] = value;\r\n                            hasAttrsChanged = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const camelizedKey = camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    if (value !== attrs[key]) {\r\n                        attrs[key] = value;\r\n                        hasAttrsChanged = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        if (setFullProps(instance, rawProps, props, attrs)) {\r\n            hasAttrsChanged = true;\r\n        }\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!hasOwn(rawProps, key) &&\r\n                    // it's possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps || !hasOwn(rawProps, key)) {\r\n                    delete attrs[key];\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it's used in component slots\r\n    if (hasAttrsChanged) {\r\n        trigger(instance, \"set\" /* SET */, '$attrs');\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    let rawCastValues;\r\n    if (rawProps) {\r\n        for (let key in rawProps) {\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            const value = rawProps[key];\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && hasOwn(options, (camelKey = camelize(key)))) {\r\n                if (!needCastKeys || !needCastKeys.includes(camelKey)) {\r\n                    props[camelKey] = value;\r\n                }\r\n                else {\r\n                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;\r\n                }\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                if (value !== attrs[key]) {\r\n                    attrs[key] = value;\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = toRaw(props);\r\n        const castValues = rawCastValues || EMPTY_OBJ;\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));\r\n        }\r\n    }\r\n    return hasAttrsChanged;\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance, isAbsent) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = hasOwn(opt, 'default');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && isFunction$1(defaultValue)) {\r\n                const { propsDefaults } = instance;\r\n                if (key in propsDefaults) {\r\n                    value = propsDefaults[key];\r\n                }\r\n                else {\r\n                    setCurrentInstance(instance);\r\n                    value = propsDefaults[key] = defaultValue.call(null, props);\r\n                    setCurrentInstance(null);\r\n                }\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (isAbsent && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === '' || value === hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.propsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, EMPTY_ARR);\r\n        return EMPTY_ARR;\r\n    }\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isObject$1(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction$1(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || hasOwn(prop, 'default')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const res = [normalized, needCastKeys];\r\n    cache.set(comp, res);\r\n    return res;\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== '$') {\r\n        return true;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid prop name: \"${key}\" is a reserved property.`);\r\n    }\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        return expectedTypes.findIndex(t => isSameType(t, type));\r\n    }\r\n    else if (isFunction$1(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(rawProps, props, instance) {\r\n    const resolvedValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol,BigInt');\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isObject$1(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(', ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nconst isInternalKey = (key) => key[0] === '_' || key === '$stable';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => {\r\n    const normalized = withCtx((props) => {\r\n        if ((process.env.NODE_ENV !== 'production') && currentInstance) {\r\n            warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n                `this will not track dependencies used in the slot. ` +\r\n                `Invoke the slot function inside the render function instead.`);\r\n        }\r\n        return normalizeSlotValue(rawSlot(props));\r\n    }, ctx);\r\n    normalized._c = false;\r\n    return normalized;\r\n};\r\nconst normalizeObjectSlots = (rawSlots, slots, instance) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (isFunction$1(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                !(false )) {\r\n                warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                    `Prefer function slots for better performance.`);\r\n            }\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        !isKeepAlive(instance.vnode) &&\r\n        !(false )) {\r\n        warn(`Non-function value encountered for default slot. ` +\r\n            `Prefer function slots for better performance.`);\r\n    }\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // users can get the shallow readonly version of the slots object through `this.$slots`,\r\n            // we should avoid the proxy object polluting the slots of the internal instance\r\n            instance.slots = toRaw(children);\r\n            // make compiler marker non-enumerable\r\n            def(children, '_', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children, optimized) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n                // Parent was HMR updated so slot content may have changed.\r\n                // force update slots and mark instance for hmr as well\r\n                extend(slots, children);\r\n            }\r\n            else if (optimized && type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                extend(slots, children);\r\n                // #2893\r\n                // when rendering the optimized slots by manually written render function,\r\n                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,\r\n                // i.e. let the `renderSlot` create the bailed Fragment\r\n                if (!optimized && type === 1 /* STABLE */) {\r\n                    delete slots._;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`withDirectives can only be used inside render functions.`);\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (isFunction$1(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        if (dir.deep) {\r\n            traverse(value);\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        let hook = binding.dir[name];\r\n        if (hook) {\r\n            // disable tracking inside all lifecycle hooks\r\n            // since they can potentially be called inside effects.\r\n            pauseTracking();\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n            resetTracking();\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            errorHandler: undefined,\r\n            warnHandler: undefined,\r\n            compilerOptions: {}\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null),\r\n        optionsCache: new WeakMap(),\r\n        propsCache: new WeakMap(),\r\n        emitsCache: new WeakMap()\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !isObject$1(rootProps)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`root props passed to app.mount() must be an object.`);\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            _instance: null,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    (process.env.NODE_ENV !== 'production') && warn(`Plugin has already been applied to target app.`);\r\n                }\r\n                else if (plugin && isFunction$1(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (isFunction$1(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (__VUE_OPTIONS_API__) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Mixin has already been applied to target app' +\r\n                            (mixin.name ? `: ${mixin.name}` : ''));\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Mixins are only available in builds supporting Options API');\r\n                }\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.components[name]) {\r\n                    warn(`Component \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.directives[name]) {\r\n                    warn(`Directive \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate, isSVG) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        context.reload = () => {\r\n                            render(cloneVNode(vnode), rootContainer, isSVG);\r\n                        };\r\n                    }\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer, isSVG);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = vnode.component;\r\n                        devtoolsInitApp(app, version);\r\n                    }\r\n                    return vnode.component.proxy;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`App has already been mounted.\\n` +\r\n                        `If you want to remount the same app, move your app creation logic ` +\r\n                        `into a factory function and create fresh app instances for each ` +\r\n                        `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\r\n                }\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = null;\r\n                        devtoolsUnmountApp(app);\r\n                    }\r\n                    delete app._container.__vue_app__;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`Cannot unmount an app that is not mounted.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ((process.env.NODE_ENV !== 'production') && key in context.provides) {\r\n                    warn(`App already provides property with key \"${String(key)}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if (!container.hasChildNodes()) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to hydrate existing markup but container is empty. ` +\r\n                    `Performing full mount instead.`);\r\n            patch(null, vnode, container);\r\n            flushPostFlushCbs();\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === '[';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warn(`Hydration text mismatch:` +\r\n                                `\\n- Client: ${JSON.stringify(node.data)}` +\r\n                                `\\n- Server: ${JSON.stringify(vnode.children)}`);\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Comment$1:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type.toLowerCase() !==\r\n                            node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    vnode.slotScopeIds = slotScopeIds;\r\n                    const container = parentNode(node);\r\n                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component's rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                    // #3787\r\n                    // if component is async, it may get moved / unmounted before its\r\n                    // inner component is loaded, so we need to give it a placeholder\r\n                    // vnode that matches its adopted DOM.\r\n                    if (isAsyncWrapper(vnode)) {\r\n                        let subTree;\r\n                        if (isFragmentStart) {\r\n                            subTree = createVNode(Fragment);\r\n                            subTree.anchor = nextNode\r\n                                ? nextNode.previousSibling\r\n                                : container.lastChild;\r\n                        }\r\n                        else {\r\n                            subTree =\r\n                                node.nodeType === 3 ? createTextVNode('') : createVNode('div');\r\n                        }\r\n                        subTree.el = node;\r\n                        vnode.component.subTree = subTree;\r\n                    }\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid HostVNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { type, props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // #4006 for form elements with non-string v-model value bindings\r\n        // e.g. <option :value=\"obj\">, <input type=\"checkbox\" :true-value=\"1\">\r\n        const forcePatchValue = (type === 'input' && dirs) || type === 'option';\r\n        // skip props & children if this is hoisted static nodes\r\n        if (forcePatchValue || patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (forcePatchValue ||\r\n                    !optimized ||\r\n                    (patchFlag & 16 /* FULL_PROPS */ ||\r\n                        patchFlag & 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if ((forcePatchValue && key.endsWith('value')) ||\r\n                            (isOn(key) && !isReservedProp(key))) {\r\n                            patchProp(el, key, null, props[key]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, 'onClick', null, props.onClick);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                        warn(`Hydration children mismatch in <${vnode.type}>: ` +\r\n                            `server rendered element contains more child nodes than client vdom.`);\r\n                        hasWarned = true;\r\n                    }\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    (process.env.NODE_ENV !== 'production') &&\r\n                        warn(`Hydration text content mismatch in <${vnode.type}>:\\n` +\r\n                            `- Client: ${el.textContent}\\n` +\r\n                            `- Server: ${vnode.children}`);\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            else if (vnode.type === Text && !vnode.children) {\r\n                continue;\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +\r\n                        `server rendered element contains fewer child nodes than client vdom.`);\r\n                    hasWarned = true;\r\n                }\r\n                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        const { slotScopeIds: fragmentSlotScopeIds } = vnode;\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n        if (next && isComment(next) && next.data === ']') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn't hydrate successfully, since we didn't get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\r\n        hasMismatch = true;\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */\r\n                ? `(text)`\r\n                : isComment(node) && node.data === '['\r\n                    ? `(start of fragment)`\r\n                    : ``);\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === '[')\r\n                    match++;\r\n                if (node.data === ']') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    /* eslint-enable no-restricted-globals */\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    let needWarn = false;\r\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_OPTIONS_API__ = true;\r\n    }\r\n    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && needWarn) {\r\n        console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` +\r\n            `configure your bundler to explicitly replace feature flag globals ` +\r\n            `with boolean literals to get proper tree-shaking in the final bundle. ` +\r\n            `See http://link.vuejs.org/feature-flags for more details.`);\r\n    }\r\n}\n\nconst prodEffectOptions = {\r\n    scheduler: queueJob,\r\n    // #1801, #2043 component render effects should allow recursive updates\r\n    allowRecurse: true\r\n};\r\nfunction createDevEffectOptions(instance) {\r\n    return {\r\n        scheduler: queueJob,\r\n        allowRecurse: true,\r\n        onTrack: instance.rtc ? e => invokeArrayFns(instance.rtc, e) : void 0,\r\n        onTrigger: instance.rtg ? e => invokeArrayFns(instance.rtg, e) : void 0\r\n    };\r\n}\r\nconst queuePostRenderEffect = queueEffectWithSuspense\r\n    ;\r\nconst setRef = (rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) => {\r\n    if (isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));\r\n        return;\r\n    }\r\n    if (isAsyncWrapper(vnode) && !isUnmount) {\r\n        // when mounting async components, nothing needs to be done,\r\n        // because the template ref is forwarded to inner component\r\n        return;\r\n    }\r\n    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */\r\n        ? getExposeProxy(vnode.component) || vnode.component.proxy\r\n        : vnode.el;\r\n    const value = isUnmount ? null : refValue;\r\n    const { i: owner, r: ref } = rawRef;\r\n    if ((process.env.NODE_ENV !== 'production') && !owner) {\r\n        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +\r\n            `A vnode with ref must be created inside the render function.`);\r\n        return;\r\n    }\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // dynamic ref changed. unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (isString(ref)) {\r\n        const doSet = () => {\r\n            {\r\n                refs[ref] = value;\r\n            }\r\n            if (hasOwn(setupState, ref)) {\r\n                setupState[ref] = value;\r\n            }\r\n        };\r\n        // #1789: for non-null values, set them after render\r\n        // null values means this is unmount and it should not overwrite another\r\n        // ref with the same key\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isRef(ref)) {\r\n        const doSet = () => {\r\n            ref.value = value;\r\n        };\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isFunction$1(ref)) {\r\n        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn('Invalid template ref type:', value, `(${typeof value})`);\r\n    }\r\n};\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        const target = getGlobalThis();\r\n        target.__VUE__ = true;\r\n        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);\r\n    }\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = (process.env.NODE_ENV !== 'production') && isHmrUpdating ? false : !!n2.dynamicChildren) => {\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment$1:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    patchStaticNode(n1, n2, container, isSVG);\r\n                }\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid VNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostInsert(el, container, nextSibling);\r\n            el = next;\r\n        }\r\n        hostInsert(anchor, container, nextSibling);\r\n    };\r\n    const removeStaticNode = ({ el, anchor }) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostRemove(el);\r\n            el = next;\r\n        }\r\n        hostRemove(anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        isSVG = isSVG || n2.type === 'svg';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;\r\n        if (!(process.env.NODE_ENV !== 'production') &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it's being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (!isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            Object.defineProperty(el, '__vnode', {\r\n                value: vnode,\r\n                enumerable: false\r\n            });\r\n            Object.defineProperty(el, '__vueParentComponent', {\r\n                value: parentComponent,\r\n                enumerable: false\r\n            });\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (slotScopeIds) {\r\n            for (let i = 0; i < slotScopeIds.length; i++) {\r\n                hostSetScopeId(el, slotScopeIds[i]);\r\n            }\r\n        }\r\n        if (parentComponent) {\r\n            let subTree = parentComponent.subTree;\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                subTree.patchFlag > 0 &&\r\n                subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n                subTree =\r\n                    filterSingleRoot(subTree.children) || subTree;\r\n            }\r\n            if (vnode === subTree) {\r\n                const parentVNode = parentComponent.vnode;\r\n                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode's patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        if (next !== prev ||\r\n                            (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);\r\n            if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                traverseStaticChildren(n1, n2);\r\n            }\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // oldVNode may be an errored async setup() component inside Suspense\r\n            // which will not have a mounted element\r\n            oldVNode.el &&\r\n                // - In the case of a Fragment, we need to provide the actual parent\r\n                // of the Fragment itself so it can move its children.\r\n                (oldVNode.type === Fragment ||\r\n                    // - In the case of different nodes, there is going to be a replacement\r\n                    // which also requires the correct parent container\r\n                    !isSameVNodeType(oldVNode, newVNode) ||\r\n                    // - In the case of a component, it could contain anything.\r\n                    oldVNode.shapeFlag & 6 /* COMPONENT */ ||\r\n                    oldVNode.shapeFlag & 64 /* TELEPORT */)\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                if (next !== prev ||\r\n                    (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));\r\n        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;\r\n        if (dynamicChildren) {\r\n            optimized = true;\r\n        }\r\n        // check if this is a slot fragment with :slotted scope ids\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren &&\r\n                // #2715 the previous fragment could've been a BAILed one as a result\r\n                // of renderSlot() with no valid children\r\n                n1.dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn't need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                    traverseStaticChildren(n1, n2);\r\n                }\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it's a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it's a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        n2.slotScopeIds = slotScopeIds;\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            registerHMR(instance);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            pushWarningContext(initialVNode);\r\n            startMeasure(instance, `mount`);\r\n        }\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                startMeasure(instance, `init`);\r\n            }\r\n            setupComponent(instance);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                endMeasure(instance, `init`);\r\n            }\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if (instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(Comment$1));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            popWarningContext();\r\n            endMeasure(instance, `mount`);\r\n        }\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component's reactive effect for render isn't set-up yet\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(n2);\r\n                }\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect runner.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        // create reactive effect for rendering\r\n        instance.update = effect(function componentEffect() {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if ((vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                if (el && hydrateNode) {\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    const hydrateSubTree = () => {\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `render`);\r\n                        }\r\n                        instance.subTree = renderComponentRoot(instance);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `render`);\r\n                        }\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `hydrate`);\r\n                        }\r\n                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `hydrate`);\r\n                        }\r\n                    };\r\n                    if (isAsyncWrapper(initialVNode)) {\r\n                        initialVNode.type.__asyncLoader().then(\r\n                        // note: we are moving the render call into an async callback,\r\n                        // which means it won't track dependencies - but it's ok because\r\n                        // a server-rendered async wrapper is already in resolved state\r\n                        // and it will never need to change.\r\n                        () => !instance.isUnmounted && hydrateSubTree());\r\n                    }\r\n                    else {\r\n                        hydrateSubTree();\r\n                    }\r\n                }\r\n                else {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `render`);\r\n                    }\r\n                    const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `render`);\r\n                    }\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `patch`);\r\n                    }\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `patch`);\r\n                    }\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if ((vnodeHook = props && props.onVnodeMounted)) {\r\n                    const scopedInitialVNode = initialVNode;\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentAdded(instance);\r\n                }\r\n                // #2458: deference mount-only object parameters to prevent memleaks\r\n                initialVNode = container = anchor = null;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `patch`);\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `patch`);\r\n                }\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentUpdated(instance);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        }, (process.env.NODE_ENV !== 'production') ? createDevEffectOptions(instance) : prodEffectOptions);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            // @ts-ignore\r\n            instance.update.ownerInstance = instance;\r\n        }\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children, optimized);\r\n        pauseTracking();\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n        resetTracking();\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ((process.env.NODE_ENV !== 'production') && keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode, true);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        let vnodeHook;\r\n        if ((vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if (shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\r\n            }\r\n            if (shapeFlag & 64 /* TELEPORT */) {\r\n                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);\r\n            }\r\n            else if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === Fragment &&\r\n                (patchFlag & 128 /* KEYED_FRAGMENT */ ||\r\n                    patchFlag & 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            unregisterHMR(instance);\r\n        }\r\n        const { bum, effects, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        if (effects) {\r\n            for (let i = 0; i < effects.length; i++) {\r\n                stop(effects[i]);\r\n            }\r\n        }\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            stop(update);\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentRemoved(instance);\r\n        }\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container, isSVG) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container, null, null, null, isSVG);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always moved so that need inherit el form previous nodes\r\n * to ensure correct moved position.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (isArray(ch1) && isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if ((process.env.NODE_ENV !== 'production') && c2.type === Comment$1 && !c2.el) {\r\n                c2.el = c1.el;\r\n            }\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = ((u + v) / 2) | 0;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');\r\nconst isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (isString(targetSelector)) {\r\n        if (!select) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current renderer does not support string target for Teleports. ` +\r\n                    `(missing querySelector renderer option)`);\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                (process.env.NODE_ENV !== 'production') &&\r\n                    warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` +\r\n                        `Note the target element must exist before the component is mounted - ` +\r\n                        `i.e. the target cannot be rendered by the component itself, and ` +\r\n                        `ideally should be outside of the entire Vue component tree.`);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if ((process.env.NODE_ENV !== 'production') && !targetSelector && !isTeleportDisabled(props)) {\r\n            warn(`Invalid Teleport target: ${targetSelector}`);\r\n        }\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        let { shapeFlag, children, dynamicChildren } = n2;\r\n        // #3302\r\n        // HMR updated, force full diff\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport start')\r\n                : createText(''));\r\n            const mainAnchor = (n2.anchor = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport end')\r\n                : createText(''));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(''));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n                // #2652 we could be teleporting from a non-SVG tree into an SVG tree\r\n                isSVG = isSVG || isTargetSVG(target);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !disabled) {\r\n                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\r\n            }\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            isSVG = isSVG || isTargetSVG(target);\r\n            if (dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);\r\n                    }\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {\r\n        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;\r\n        if (target) {\r\n            hostRemove(targetAnchor);\r\n        }\r\n        // an unmounted teleport should always remove its children if not disabled\r\n        if (doRemove || !isTeleportDisabled(props)) {\r\n            hostRemove(anchor);\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    const child = children[i];\r\n                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = 'components';\r\nconst DIRECTIVES = 'directives';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name, maybeSelfReference) {\r\n    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // explicit self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = getComponentName(Component);\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === camelize(name) ||\r\n                    selfName === capitalize(camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first which is resolved for options API\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if (!res && maybeSelfReference) {\r\n            // fallback to implicit self-reference\r\n            return Component;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && warnMissing && !res) {\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\r\n        }\r\n        return res;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[camelize(name)] ||\r\n            registry[capitalize(camelize(name))]));\r\n}\n\nconst Fragment = Symbol((process.env.NODE_ENV !== 'production') ? 'Fragment' : undefined);\r\nconst Text = Symbol((process.env.NODE_ENV !== 'production') ? 'Text' : undefined);\r\nconst Comment$1 = Symbol((process.env.NODE_ENV !== 'production') ? 'Comment' : undefined);\r\nconst Static = Symbol((process.env.NODE_ENV !== 'production') ? 'Static' : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet isBlockTreeEnabled = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    isBlockTreeEnabled += value;\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */);\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren =\r\n        isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        n2.shapeFlag & 6 /* COMPONENT */ &&\r\n        hmrDirtyComponents.has(n2.type)) {\r\n        // HMR only: if the component has been hot-updated, force a reload.\r\n        return false;\r\n    }\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref }) => {\r\n    return (ref != null\r\n        ? isString(ref) || isRef(ref) || isFunction$1(ref)\r\n            ? { i: currentRenderingInstance, r: ref }\r\n            : ref\r\n        : null);\r\n};\r\nconst createVNode = ((process.env.NODE_ENV !== 'production')\r\n    ? createVNodeWithArgsTransform\r\n    : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if ((process.env.NODE_ENV !== 'production') && !type) {\r\n            warn(`Invalid vnode type when creating vnode: ${type}.`);\r\n        }\r\n        type = Comment$1;\r\n    }\r\n    if (isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is=\"vnode\"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        if (isProxy(props) || InternalObjectKey in props) {\r\n            props = extend({}, props);\r\n        }\r\n        let { class: klass, style } = props;\r\n        if (klass && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (isObject$1(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : isObject$1(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : isFunction$1(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if ((process.env.NODE_ENV !== 'production') && shapeFlag & 4 /* STATEFUL_COMPONENT */ && isProxy(type)) {\r\n        type = toRaw(type);\r\n        warn(`Vue received a Component which was made a reactive object. This can ` +\r\n            `lead to unnecessary performance overhead, and should be avoided by ` +\r\n            `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` +\r\n            `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\r\n    }\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        slotScopeIds: null,\r\n        children: null,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    // validate key\r\n    if ((process.env.NODE_ENV !== 'production') && vnode.key !== vnode.key) {\r\n        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\r\n    }\r\n    normalizeChildren(vnode, children);\r\n    // normalize suspense children\r\n    if (shapeFlag & 128 /* SUSPENSE */) {\r\n        type.normalize(vnode);\r\n    }\r\n    if (isBlockTreeEnabled > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn't need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag, children } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    const cloned = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        slotScopeIds: vnode.slotScopeIds,\r\n        children: (process.env.NODE_ENV !== 'production') && patchFlag === -1 /* HOISTED */ && isArray(children)\r\n            ? children.map(deepCloneVNode)\r\n            : children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: perserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn't affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n    return cloned;\r\n}\r\n/**\r\n * Dev only, for HMR of hoisted vnodes reused in v-for\r\n * https://github.com/vitejs/vite/issues/2022\r\n */\r\nfunction deepCloneVNode(vnode) {\r\n    const cloned = cloneVNode(vnode);\r\n    if (isArray(vnode.children)) {\r\n        cloned.children = vnode.children.map(deepCloneVNode);\r\n    }\r\n    return cloned;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (openBlock(), createBlock(Comment$1, null, text))\r\n        : createVNode(Comment$1, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === 'boolean') {\r\n        // empty placeholder\r\n        return createVNode(Comment$1);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, \r\n        // #3666, avoid reference pollution when reusing vnode\r\n        child.slice());\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return cloneIfMounted(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        if (shapeFlag & 1 /* ELEMENT */ || shapeFlag & 64 /* TELEPORT */) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && (slot._d = false);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && (slot._d = true);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent's slot type.\r\n                if (currentRenderingInstance.slots._ === 1 /* STABLE */) {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n                else {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction$1(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = extend({}, args[0]);\r\n    for (let i = 1; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (existing !== incoming) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, incoming)\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== '') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem) {\r\n    let ret;\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        if ((process.env.NODE_ENV !== 'production') && !Number.isInteger(source)) {\r\n            warn(`The v-for range expect an integer value but got ${source}.`);\r\n            return [];\r\n        }\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject$1(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, renderItem);\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback, noSlotted) {\r\n    let slot = slots[name];\r\n    if ((process.env.NODE_ENV !== 'production') && slot && slot.length > 1) {\r\n        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +\r\n            `function. You need to mark this component with $dynamic-slots in the ` +\r\n            `parent template.`);\r\n        slot = () => [];\r\n    }\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it's template-based so we can force\r\n    // enable it.\r\n    if (slot && slot._c) {\r\n        slot._d = false;\r\n    }\r\n    openBlock();\r\n    const validSlotContent = slot && ensureValidVNode(slot(props));\r\n    const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */\r\n        ? 64 /* STABLE_FRAGMENT */\r\n        : -2 /* BAIL */);\r\n    if (!noSlotted && rendered.scopeId) {\r\n        rendered.slotScopeIds = [rendered.scopeId + '-s'];\r\n    }\r\n    if (slot && slot._c) {\r\n        slot._d = true;\r\n    }\r\n    return rendered;\r\n}\r\nfunction ensureValidVNode(vnodes) {\r\n    return vnodes.some(child => {\r\n        if (!isVNode(child))\r\n            return true;\r\n        if (child.type === Comment$1)\r\n            return false;\r\n        if (child.type === Fragment &&\r\n            !ensureValidVNode(child.children))\r\n            return false;\r\n        return true;\r\n    })\r\n        ? vnodes\r\n        : null;\r\n}\n\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isObject$1(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * #2437 In Vue 3, functional components do not have a public instance proxy but\r\n * they exist in the internal parent chain. For code that relies on traversing\r\n * public $parent chains, skip functional ones and go to the parent instead.\r\n */\r\nconst getPublicInstance = (i) => {\r\n    if (!i)\r\n        return null;\r\n    if (isStatefulComponent(i))\r\n        return getExposeProxy(i) || i.proxy;\r\n    return getPublicInstance(i.parent);\r\n};\r\nconst publicPropertiesMap = extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.props) : i.props),\r\n    $attrs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.attrs) : i.attrs),\r\n    $slots: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.slots) : i.slots),\r\n    $refs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.refs) : i.refs),\r\n    $parent: i => getPublicInstance(i.parent),\r\n    $root: i => getPublicInstance(i.root),\r\n    $emit: i => i.emit,\r\n    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => nextTick.bind(i.proxy),\r\n    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // for internal formatters to know that this is a Vue instance\r\n        if ((process.env.NODE_ENV !== 'production') && key === '__isVue') {\r\n            return true;\r\n        }\r\n        // prioritize <script setup> bindings during dev.\r\n        // this allows even properties that start with _ or $ to be used - so that\r\n        // it aligns with the production behavior where the render fn is inlined and\r\n        // indeed has access to all declared variables.\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            setupState !== EMPTY_OBJ &&\r\n            setupState.__isScriptSetup &&\r\n            hasOwn(setupState, key)) {\r\n            return setupState[key];\r\n        }\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== '$') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 0 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 1 /* DATA */:\r\n                        return data[key];\r\n                    case 3 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 2 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n                accessCache[key] = 0 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n                accessCache[key] = 1 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n                accessCache[key] = 3 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {\r\n                accessCache[key] = 4 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === '$attrs') {\r\n                track(instance, \"get\" /* GET */, key);\r\n                (process.env.NODE_ENV !== 'production') && markAttrsAccessed();\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 3 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            hasOwn(globalProperties, key))) {\r\n            {\r\n                return globalProperties[key];\r\n            }\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production') &&\r\n            currentRenderingInstance &&\r\n            (!isString(key) ||\r\n                // #1091 avoid internal isRef/isVNode checks on component instance leading\r\n                // to infinite warning loop\r\n                key.indexOf('__v') !== 0)) {\r\n            if (data !== EMPTY_OBJ &&\r\n                (key[0] === '$' || key[0] === '_') &&\r\n                hasOwn(data, key)) {\r\n                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +\r\n                    `character (\"$\" or \"_\") and is not proxied on the render context.`);\r\n            }\r\n            else if (instance === currentRenderingInstance) {\r\n                warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                    `but is not defined on instance.`);\r\n            }\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(instance.props, key)) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\r\n            return false;\r\n        }\r\n        if (key[0] === '$' && key.slice(1) in instance) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, instance);\r\n            return false;\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && key in instance.appContext.config.globalProperties) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    value\r\n                });\r\n            }\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (accessCache[key] !== undefined ||\r\n            (data !== EMPTY_OBJ && hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key)) ||\r\n            hasOwn(ctx, key) ||\r\n            hasOwn(publicPropertiesMap, key) ||\r\n            hasOwn(appContext.config.globalProperties, key));\r\n    }\r\n};\r\nif ((process.env.NODE_ENV !== 'production') && !false) {\r\n    PublicInstanceProxyHandlers.ownKeys = (target) => {\r\n        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +\r\n            `The keys will be empty in production mode to avoid performance overhead.`);\r\n        return Reflect.ownKeys(target);\r\n    };\r\n}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== '_' && !isGloballyWhitelisted(key);\r\n        if ((process.env.NODE_ENV !== 'production') && !has && PublicInstanceProxyHandlers.has(_, key)) {\r\n            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\r\n        }\r\n        return has;\r\n    }\r\n});\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (!setupState.__isScriptSetup && (key[0] === '$' || key[0] === '_')) {\r\n            warn(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" ` +\r\n                `which are reserved prefixes for Vue internals.`);\r\n            return;\r\n        }\r\n        Object.defineProperty(ctx, key, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => setupState[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        render: null,\r\n        proxy: null,\r\n        exposed: null,\r\n        exposeProxy: null,\r\n        withProxy: null,\r\n        effects: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // props default value\r\n        propsDefaults: EMPTY_OBJ,\r\n        // inheritAttrs\r\n        inheritAttrs: type.inheritAttrs,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null,\r\n        sp: null\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        instance.ctx = createRenderContext(instance);\r\n    }\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit.bind(null, instance);\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nfunction isStatefulComponent(instance) {\r\n    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children } = instance.vnode;\r\n    const isStateful = isStatefulComponent(instance);\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateComponentName(names[i], instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n        if (Component.compilerOptions && isRuntimeOnly()) {\r\n            warn(`\"compilerOptions\" is only supported when using a build of Vue that ` +\r\n                `includes the runtime compiler. Since you are using a runtime-only ` +\r\n                `build, the options should be passed via your build tool config instead.`);\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it's never observed\r\n    instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        exposePropsOnRenderContext(instance);\r\n    }\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [(process.env.NODE_ENV !== 'production') ? shallowReadonly(instance.props) : instance.props, setupContext]);\r\n        resetTracking();\r\n        currentInstance = null;\r\n        if (isPromise$1(setupResult)) {\r\n            const unsetInstance = () => {\r\n                currentInstance = null;\r\n            };\r\n            setupResult.then(unsetInstance, unsetInstance);\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult\r\n                    .then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult, isSSR);\r\n                })\r\n                    .catch(e => {\r\n                    handleError(e, instance, 0 /* SETUP_FUNCTION */);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, isSSR);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, isSSR);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (isFunction$1(setupResult)) {\r\n        // setup returned an inline render function\r\n        {\r\n            instance.render = setupResult;\r\n        }\r\n    }\r\n    else if (isObject$1(setupResult)) {\r\n        if ((process.env.NODE_ENV !== 'production') && isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.devtoolsRawSetupState = setupResult;\r\n        }\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            exposeSetupStateOnRenderContext(instance);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production') && setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance, isSSR);\r\n}\r\nlet compile;\r\n// dev only\r\nconst isRuntimeOnly = () => !compile;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n}\r\nfunction finishComponentSetup(instance, isSSR, skipOptions) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    if (!instance.render) {\r\n        // could be set from setup()\r\n        if (compile && !Component.render) {\r\n            const template = Component.template;\r\n            if (template) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `compile`);\r\n                }\r\n                const { isCustomElement, compilerOptions } = instance.appContext.config;\r\n                const { delimiters, compilerOptions: componentCompilerOptions } = Component;\r\n                const finalCompilerOptions = extend(extend({\r\n                    isCustomElement,\r\n                    delimiters\r\n                }, compilerOptions), componentCompilerOptions);\r\n                Component.render = compile(template, finalCompilerOptions);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `compile`);\r\n                }\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (instance.render._rc) {\r\n            instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (__VUE_OPTIONS_API__ && !(false )) {\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        applyOptions(instance);\r\n        resetTracking();\r\n        currentInstance = null;\r\n    }\r\n    // warn missing template/render\r\n    // the runtime compilation of template in SSR is done by server-render\r\n    if ((process.env.NODE_ENV !== 'production') && !Component.render && instance.render === NOOP && !isSSR) {\r\n        /* istanbul ignore if */\r\n        if (!compile && Component.template) {\r\n            warn(`Component provided template option but ` +\r\n                `runtime compilation is not supported in this build of Vue.` +\r\n                (` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\r\n                    ) /* should not happen */);\r\n        }\r\n        else {\r\n            warn(`Component is missing template or render function.`);\r\n        }\r\n    }\r\n}\r\nconst attrDevProxyHandlers = {\r\n    get: (target, key) => {\r\n        markAttrsAccessed();\r\n        return target[key];\r\n    },\r\n    set: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    },\r\n    deleteProperty: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    }\r\n};\r\nfunction createSetupContext(instance) {\r\n    const expose = exposed => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.exposed) {\r\n            warn(`expose() should be called only once per setup().`);\r\n        }\r\n        instance.exposed = exposed || {};\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        let attrs;\r\n        // We use getters in dev in case libs like test-utils overwrite instance\r\n        // properties (overwrites should not be done in prod)\r\n        return Object.freeze({\r\n            get attrs() {\r\n                return (attrs || (attrs = new Proxy(instance.attrs, attrDevProxyHandlers)));\r\n            },\r\n            get slots() {\r\n                return shallowReadonly(instance.slots);\r\n            },\r\n            get emit() {\r\n                return (event, ...args) => instance.emit(event, ...args);\r\n            },\r\n            expose\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            attrs: instance.attrs,\r\n            slots: instance.slots,\r\n            emit: instance.emit,\r\n            expose\r\n        };\r\n    }\r\n}\r\nfunction getExposeProxy(instance) {\r\n    if (instance.exposed) {\r\n        return (instance.exposeProxy ||\r\n            (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {\r\n                get(target, key) {\r\n                    if (key in target) {\r\n                        return target[key];\r\n                    }\r\n                    else if (key in publicPropertiesMap) {\r\n                        return publicPropertiesMap[key](instance);\r\n                    }\r\n                }\r\n            })));\r\n    }\r\n}\r\n// record effects created during a component's setup() so that they can be\r\n// stopped when the component unmounts\r\nfunction recordInstanceBoundEffect(effect, instance = currentInstance) {\r\n    if (instance) {\r\n        (instance.effects || (instance.effects = [])).push(effect);\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction getComponentName(Component) {\r\n    return isFunction$1(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = getComponentName(Component);\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return isFunction$1(value) && '__vccOpts' in value;\r\n}\n\nfunction computed(getterOrOptions) {\r\n    const c = computed$1(getterOrOptions);\r\n    recordInstanceBoundEffect(c.effect);\r\n    return c;\r\n}\n\n(process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\n(process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\n\n// dev only\r\nconst warnRuntimeUsage = (method) => warn(`${method}() is a compiler-hint helper that is only usable inside ` +\r\n    `<script setup> of a single file component. Its arguments should be ` +\r\n    `compiled away and passing it at runtime has no effect.`);\r\n// implementation\r\nfunction defineProps() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineProps`);\r\n    }\r\n    return null;\r\n}\r\n// implementation\r\nfunction defineEmits() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineEmits`);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @deprecated use `defineEmits` instead.\r\n */\r\nconst defineEmit = defineEmits;\r\n/**\r\n * Vue `<script setup>` compiler macro for declaring a component's exposed\r\n * instance properties when it is accessed by a parent component via template\r\n * refs.\r\n *\r\n * `<script setup>` components are closed by default - i.e. varaibles inside\r\n * the `<script setup>` scope is not exposed to parent unless explicitly exposed\r\n * via `defineExpose`.\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the\r\n * output and should **not** be actually called at runtime.\r\n */\r\nfunction defineExpose(exposed) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineExpose`);\r\n    }\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for providing props default values when\r\n * using type-based `defineProps` decalration.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * withDefaults(defineProps<{\r\n *   size?: number\r\n *   labels?: string[]\r\n * }>(), {\r\n *   size: 3,\r\n *   labels: () => ['default label']\r\n * })\r\n * ```\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the output\r\n * and should **not** be actually called at runtime.\r\n */\r\nfunction withDefaults(props, defaults) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`withDefaults`);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @deprecated use `useSlots` and `useAttrs` instead.\r\n */\r\nfunction useContext() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`\\`useContext()\\` has been deprecated and will be removed in the ` +\r\n            `next minor release. Use \\`useSlots()\\` and \\`useAttrs()\\` instead.`);\r\n    }\r\n    return getContext();\r\n}\r\nfunction useSlots() {\r\n    return getContext().slots;\r\n}\r\nfunction useAttrs() {\r\n    return getContext().attrs;\r\n}\r\nfunction getContext() {\r\n    const i = getCurrentInstance();\r\n    if ((process.env.NODE_ENV !== 'production') && !i) {\r\n        warn(`useContext() called without active instance.`);\r\n    }\r\n    return i.setupContext || (i.setupContext = createSetupContext(i));\r\n}\r\n/**\r\n * Runtime helper for merging default declarations. Imported by compiled code\r\n * only.\r\n * @internal\r\n */\r\nfunction mergeDefaults(\r\n// the base props is compiler-generated and guaranteed to be in this shape.\r\nprops, defaults) {\r\n    for (const key in defaults) {\r\n        const val = props[key];\r\n        if (val) {\r\n            val.default = defaults[key];\r\n        }\r\n        else if (val === null) {\r\n            props[key] = { default: defaults[key] };\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`props default key \"${key}\" has no corresponding declaration.`);\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n * `<script setup>` helper for persisting the current instance context over\r\n * async/await flows.\r\n *\r\n * `@vue/compiler-sfc` converts the following:\r\n *\r\n * ```ts\r\n * const x = await foo()\r\n * ```\r\n *\r\n * into:\r\n *\r\n * ```ts\r\n * let __temp, __restore\r\n * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)\r\n * ```\r\n * @internal\r\n */\r\nfunction withAsyncContext(getAwaitable) {\r\n    const ctx = getCurrentInstance();\r\n    let awaitable = getAwaitable();\r\n    setCurrentInstance(null);\r\n    if (isPromise(awaitable)) {\r\n        awaitable = awaitable.catch(e => {\r\n            setCurrentInstance(ctx);\r\n            throw e;\r\n        });\r\n    }\r\n    return [awaitable, () => setCurrentInstance(ctx)];\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (isObject$1(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol((process.env.NODE_ENV !== 'production') ? `ssrContext` : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = inject(ssrContextKey);\r\n        if (!ctx) {\r\n            warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSSRContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction initCustomFormatter() {\r\n    /* eslint-disable no-restricted-globals */\r\n    if (!(process.env.NODE_ENV !== 'production') || typeof window === 'undefined') {\r\n        return;\r\n    }\r\n    const vueStyle = { style: 'color:#3ba776' };\r\n    const numberStyle = { style: 'color:#0b1bc9' };\r\n    const stringStyle = { style: 'color:#b62e24' };\r\n    const keywordStyle = { style: 'color:#9d288c' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!isObject$1(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return ['div', vueStyle, `VueInstance`];\r\n            }\r\n            else if (isRef(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, genRefFlag(obj)],\r\n                    '<',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Reactive'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Readonly'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    '>'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock('props', toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('setup', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('data', toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, 'computed');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock('computed', computed));\r\n        }\r\n        const injected = extractKeys(instance, 'inject');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock('injected', injected));\r\n        }\r\n        blocks.push([\r\n            'div',\r\n            {},\r\n            [\r\n                'span',\r\n                {\r\n                    style: keywordStyle.style + ';opacity:0.66'\r\n                },\r\n                '$ (internal): '\r\n            ],\r\n            ['object', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return ['span', {}];\r\n        }\r\n        return [\r\n            'div',\r\n            { style: 'line-height:1.25em;margin-bottom:0.6em' },\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'color:#476582'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'padding-left:1.25em'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        'div',\r\n                        {},\r\n                        ['span', keywordStyle, key + ': '],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === 'number') {\r\n            return ['span', numberStyle, v];\r\n        }\r\n        else if (typeof v === 'string') {\r\n            return ['span', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === 'boolean') {\r\n            return ['span', keywordStyle, v];\r\n        }\r\n        else if (isObject$1(v)) {\r\n            return ['object', { object: asRaw ? toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return ['span', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (isFunction$1(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((isArray(opts) && opts.includes(key)) ||\r\n            (isObject$1(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (v._shallow) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = \"3.1.5\";\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = (null);\r\n/**\r\n * @internal only exposed in compat builds\r\n */\r\nconst resolveFilter = null;\r\n/**\r\n * @internal only exposed in compat builds.\r\n */\r\nconst compatUtils = (null);\n\nexport { BaseTransition, Comment$1 as Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmit, defineEmits, defineExpose, defineProps, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, initCustomFormatter, inject, isRuntimeOnly, isVNode, mergeDefaults, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useContext, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withScopeId };\n","import { EMPTY_OBJ, isArray, isMap, isIntegerKey, isSymbol, extend, hasOwn, isObject, hasChanged, makeMap, capitalize, toRawType, def, isFunction, NOOP } from '@vue/shared';\n\nconst targetMap = new WeakMap();\r\nconst effectStack = [];\r\nlet activeEffect;\r\nconst ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'iterate' : '');\r\nconst MAP_KEY_ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'Map key iterate' : '');\r\nfunction isEffect(fn) {\r\n    return fn && fn._isEffect === true;\r\n}\r\nfunction effect(fn, options = EMPTY_OBJ) {\r\n    if (isEffect(fn)) {\r\n        fn = fn.raw;\r\n    }\r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) {\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\nfunction stop(effect) {\r\n    if (effect.active) {\r\n        cleanup(effect);\r\n        if (effect.options.onStop) {\r\n            effect.options.onStop();\r\n        }\r\n        effect.active = false;\r\n    }\r\n}\r\nlet uid = 0;\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effect.active) {\r\n            return fn();\r\n        }\r\n        if (!effectStack.includes(effect)) {\r\n            cleanup(effect);\r\n            try {\r\n                enableTracking();\r\n                effectStack.push(effect);\r\n                activeEffect = effect;\r\n                return fn();\r\n            }\r\n            finally {\r\n                effectStack.pop();\r\n                resetTracking();\r\n                activeEffect = effectStack[effectStack.length - 1];\r\n            }\r\n        }\r\n    };\r\n    effect.id = uid++;\r\n    effect.allowRecurse = !!options.allowRecurse;\r\n    effect._isEffect = true;\r\n    effect.active = true;\r\n    effect.raw = fn;\r\n    effect.deps = [];\r\n    effect.options = options;\r\n    return effect;\r\n}\r\nfunction cleanup(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nlet shouldTrack = true;\r\nconst trackStack = [];\r\nfunction pauseTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n    const last = trackStack.pop();\r\n    shouldTrack = last === undefined ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n    if (!shouldTrack || activeEffect === undefined) {\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()));\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect);\r\n        activeEffect.deps.push(dep);\r\n        if ((process.env.NODE_ENV !== 'production') && activeEffect.options.onTrack) {\r\n            activeEffect.options.onTrack({\r\n                effect: activeEffect,\r\n                target,\r\n                type,\r\n                key\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    const effects = new Set();\r\n    const add = (effectsToAdd) => {\r\n        if (effectsToAdd) {\r\n            effectsToAdd.forEach(effect => {\r\n                if (effect !== activeEffect || effect.allowRecurse) {\r\n                    effects.add(effect);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    if (type === \"clear\" /* CLEAR */) {\r\n        // collection being cleared\r\n        // trigger all effects for target\r\n        depsMap.forEach(add);\r\n    }\r\n    else if (key === 'length' && isArray(target)) {\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === 'length' || key >= newValue) {\r\n                add(dep);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            add(depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE | Map.SET\r\n        switch (type) {\r\n            case \"add\" /* ADD */:\r\n                if (!isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                else if (isIntegerKey(key)) {\r\n                    // new index added to array -> length changes\r\n                    add(depsMap.get('length'));\r\n                }\r\n                break;\r\n            case \"delete\" /* DELETE */:\r\n                if (!isArray(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        add(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                break;\r\n            case \"set\" /* SET */:\r\n                if (isMap(target)) {\r\n                    add(depsMap.get(ITERATE_KEY));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    const run = (effect) => {\r\n        if ((process.env.NODE_ENV !== 'production') && effect.options.onTrigger) {\r\n            effect.options.onTrigger({\r\n                effect,\r\n                target,\r\n                key,\r\n                type,\r\n                newValue,\r\n                oldValue,\r\n                oldTarget\r\n            });\r\n        }\r\n        if (effect.options.scheduler) {\r\n            effect.options.scheduler(effect);\r\n        }\r\n        else {\r\n            effect();\r\n        }\r\n    };\r\n    effects.forEach(run);\r\n}\n\nconst isNonTrackableKeys = /*#__PURE__*/ makeMap(`__proto__,__v_isRef,__isVue`);\r\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nconst get = /*#__PURE__*/ createGetter();\r\nconst shallowGet = /*#__PURE__*/ createGetter(false, true);\r\nconst readonlyGet = /*#__PURE__*/ createGetter(true);\r\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\r\nconst arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();\r\nfunction createArrayInstrumentations() {\r\n    const instrumentations = {};\r\n    ['includes', 'indexOf', 'lastIndexOf'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            const arr = toRaw(this);\r\n            for (let i = 0, l = this.length; i < l; i++) {\r\n                track(arr, \"get\" /* GET */, i + '');\r\n            }\r\n            // we run the method using the original args first (which may be reactive)\r\n            const res = arr[key](...args);\r\n            if (res === -1 || res === false) {\r\n                // if that didn't work, run it again using raw values.\r\n                return arr[key](...args.map(toRaw));\r\n            }\r\n            else {\r\n                return res;\r\n            }\r\n        };\r\n    });\r\n    ['push', 'pop', 'shift', 'unshift', 'splice'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            pauseTracking();\r\n            const res = toRaw(this)[key].apply(this, args);\r\n            resetTracking();\r\n            return res;\r\n        };\r\n    });\r\n    return instrumentations;\r\n}\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n    return function get(target, key, receiver) {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */ &&\r\n            receiver ===\r\n                (isReadonly\r\n                    ? shallow\r\n                        ? shallowReadonlyMap\r\n                        : readonlyMap\r\n                    : shallow\r\n                        ? shallowReactiveMap\r\n                        : reactiveMap).get(target)) {\r\n            return target;\r\n        }\r\n        const targetIsArray = isArray(target);\r\n        if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n            return Reflect.get(arrayInstrumentations, key, receiver);\r\n        }\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n            return res;\r\n        }\r\n        if (!isReadonly) {\r\n            track(target, \"get\" /* GET */, key);\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n        }\r\n        if (isRef(res)) {\r\n            // ref unwrapping - does not apply for Array + integer key.\r\n            const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n            return shouldUnwrap ? res.value : res;\r\n        }\r\n        if (isObject(res)) {\r\n            // Convert returned value into a proxy as well. we do the isObject check\r\n            // here to avoid invalid value warning. Also need to lazy access readonly\r\n            // and reactive here to avoid circular dependency.\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nconst set = /*#__PURE__*/ createSetter();\r\nconst shallowSet = /*#__PURE__*/ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        let oldValue = target[key];\r\n        if (!shallow) {\r\n            value = toRaw(value);\r\n            oldValue = toRaw(oldValue);\r\n            if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\r\n                oldValue.value = value;\r\n                return true;\r\n            }\r\n        }\r\n        const hadKey = isArray(target) && isIntegerKey(key)\r\n            ? Number(key) < target.length\r\n            : hasOwn(target, key);\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        // don't trigger if target is something up in the prototype chain of original\r\n        if (target === toRaw(receiver)) {\r\n            if (!hadKey) {\r\n                trigger(target, \"add\" /* ADD */, key, value);\r\n            }\r\n            else if (hasChanged(value, oldValue)) {\r\n                trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n        track(target, \"has\" /* HAS */, key);\r\n    }\r\n    return result;\r\n}\r\nfunction ownKeys(target) {\r\n    track(target, \"iterate\" /* ITERATE */, isArray(target) ? 'length' : ITERATE_KEY);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get,\r\n    set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: readonlyGet,\r\n    set(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    },\r\n    deleteProperty(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    }\r\n};\r\nconst shallowReactiveHandlers = /*#__PURE__*/ extend({}, mutableHandlers, {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n});\r\n// Props handlers are special in the sense that it should not unwrap top-level\r\n// refs (in order to allow refs to be explicitly passed down), but should\r\n// retain the reactivity of the normal readonly object.\r\nconst shallowReadonlyHandlers = /*#__PURE__*/ extend({}, readonlyHandlers, {\r\n    get: shallowReadonlyGet\r\n});\n\nconst toReactive = (value) => isObject(value) ? reactive(value) : value;\r\nconst toReadonly = (value) => isObject(value) ? readonly(value) : value;\r\nconst toShallow = (value) => value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n    // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n    // of the value\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"get\" /* GET */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"get\" /* GET */, rawKey);\r\n    const { has } = getProto(rawTarget);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    if (has.call(rawTarget, key)) {\r\n        return wrap(target.get(key));\r\n    }\r\n    else if (has.call(rawTarget, rawKey)) {\r\n        return wrap(target.get(rawKey));\r\n    }\r\n    else if (target !== rawTarget) {\r\n        // #3602 readonly(reactive(Map))\r\n        // ensure that the nested reactive `Map` can do tracking for itself\r\n        target.get(key);\r\n    }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n    const target = this[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"has\" /* HAS */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"has\" /* HAS */, rawKey);\r\n    return key === rawKey\r\n        ? target.has(key)\r\n        : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    !isReadonly && track(toRaw(target), \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n    return Reflect.get(target, 'size', target);\r\n}\r\nfunction add(value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    if (!hadKey) {\r\n        target.add(value);\r\n        trigger(target, \"add\" /* ADD */, value, value);\r\n    }\r\n    return this;\r\n}\r\nfunction set$1(key, value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get.call(target, key);\r\n    target.set(key, value);\r\n    if (!hadKey) {\r\n        trigger(target, \"add\" /* ADD */, key, value);\r\n    }\r\n    else if (hasChanged(value, oldValue)) {\r\n        trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n    }\r\n    return this;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get ? get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.delete(key);\r\n    if (hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget = (process.env.NODE_ENV !== 'production')\r\n        ? isMap(target)\r\n            ? new Map(target)\r\n            : new Set(target)\r\n        : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.clear();\r\n    if (hadItems) {\r\n        trigger(target, \"clear\" /* CLEAR */, undefined, undefined, oldTarget);\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = observed[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly && track(rawTarget, \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n        return target.forEach((value, key) => {\r\n            // important: make sure the callback is\r\n            // 1. invoked with the reactive map as `this` and 3rd arg\r\n            // 2. the value received should be a corresponding reactive/readonly.\r\n            return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n        });\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n    return function (...args) {\r\n        const target = this[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const targetIsMap = isMap(rawTarget);\r\n        const isPair = method === 'entries' || (method === Symbol.iterator && targetIsMap);\r\n        const isKeyOnly = method === 'keys' && targetIsMap;\r\n        const innerIterator = target[method](...args);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly &&\r\n            track(rawTarget, \"iterate\" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n    return function (...args) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            const key = args[0] ? `on key \"${args[0]}\" ` : ``;\r\n            console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\r\n        }\r\n        return type === \"delete\" /* DELETE */ ? false : this;\r\n    };\r\n}\r\nfunction createInstrumentations() {\r\n    const mutableInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, false)\r\n    };\r\n    const shallowInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, false, true);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, true)\r\n    };\r\n    const readonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod(\"add\" /* ADD */),\r\n        set: createReadonlyMethod(\"set\" /* SET */),\r\n        delete: createReadonlyMethod(\"delete\" /* DELETE */),\r\n        clear: createReadonlyMethod(\"clear\" /* CLEAR */),\r\n        forEach: createForEach(true, false)\r\n    };\r\n    const shallowReadonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod(\"add\" /* ADD */),\r\n        set: createReadonlyMethod(\"set\" /* SET */),\r\n        delete: createReadonlyMethod(\"delete\" /* DELETE */),\r\n        clear: createReadonlyMethod(\"clear\" /* CLEAR */),\r\n        forEach: createForEach(true, true)\r\n    };\r\n    const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\r\n    iteratorMethods.forEach(method => {\r\n        mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n        readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n        shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\r\n    });\r\n    return [\r\n        mutableInstrumentations,\r\n        readonlyInstrumentations,\r\n        shallowInstrumentations,\r\n        shallowReadonlyInstrumentations\r\n    ];\r\n}\r\nconst [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n    const instrumentations = shallow\r\n        ? isReadonly\r\n            ? shallowReadonlyInstrumentations\r\n            : shallowInstrumentations\r\n        : isReadonly\r\n            ? readonlyInstrumentations\r\n            : mutableInstrumentations;\r\n    return (target, key, receiver) => {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */) {\r\n            return target;\r\n        }\r\n        return Reflect.get(hasOwn(instrumentations, key) && key in target\r\n            ? instrumentations\r\n            : target, key, receiver);\r\n    };\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, false)\r\n};\r\nconst shallowCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, true)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, false)\r\n};\r\nconst shallowReadonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, true)\r\n};\r\nfunction checkIdentityKeys(target, has, key) {\r\n    const rawKey = toRaw(key);\r\n    if (rawKey !== key && has.call(target, rawKey)) {\r\n        const type = toRawType(target);\r\n        console.warn(`Reactive ${type} contains both the raw and reactive ` +\r\n            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n            `which can lead to inconsistencies. ` +\r\n            `Avoid differentiating between the raw and reactive versions ` +\r\n            `of an object and only use the reactive version if possible.`);\r\n    }\r\n}\n\nconst reactiveMap = new WeakMap();\r\nconst shallowReactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\nconst shallowReadonlyMap = new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n    switch (rawType) {\r\n        case 'Object':\r\n        case 'Array':\r\n            return 1 /* COMMON */;\r\n        case 'Map':\r\n        case 'Set':\r\n        case 'WeakMap':\r\n        case 'WeakSet':\r\n            return 2 /* COLLECTION */;\r\n        default:\r\n            return 0 /* INVALID */;\r\n    }\r\n}\r\nfunction getTargetType(value) {\r\n    return value[\"__v_skip\" /* SKIP */] || !Object.isExtensible(value)\r\n        ? 0 /* INVALID */\r\n        : targetTypeMap(toRawType(value));\r\n}\r\nfunction reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (target && target[\"__v_isReadonly\" /* IS_READONLY */]) {\r\n        return target;\r\n    }\r\n    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\r\n}\r\n/**\r\n * Return a shallowly-reactive copy of the original object, where only the root\r\n * level properties are reactive. It also does not auto-unwrap refs (even at the\r\n * root level).\r\n */\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\r\n}\r\n/**\r\n * Creates a readonly copy of the original object. Note the returned copy is not\r\n * made reactive, but `readonly` can be called on an already reactive object.\r\n */\r\nfunction readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\r\n}\r\n/**\r\n * Returns a reactive-copy of the original object, where only the root level\r\n * properties are readonly, and does NOT unwrap refs nor recursively convert\r\n * returned properties.\r\n * This is used for creating the props proxy object for stateful components.\r\n */\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\r\n    if (!isObject(target)) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`value cannot be made reactive: ${String(target)}`);\r\n        }\r\n        return target;\r\n    }\r\n    // target is already a Proxy, return it.\r\n    // exception: calling readonly() on a reactive object\r\n    if (target[\"__v_raw\" /* RAW */] &&\r\n        !(isReadonly && target[\"__v_isReactive\" /* IS_REACTIVE */])) {\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    const existingProxy = proxyMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    const targetType = getTargetType(target);\r\n    if (targetType === 0 /* INVALID */) {\r\n        return target;\r\n    }\r\n    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value[\"__v_raw\" /* RAW */]);\r\n    }\r\n    return !!(value && value[\"__v_isReactive\" /* IS_REACTIVE */]);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value[\"__v_isReadonly\" /* IS_READONLY */]);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction toRaw(observed) {\r\n    return ((observed && toRaw(observed[\"__v_raw\" /* RAW */])) || observed);\r\n}\r\nfunction markRaw(value) {\r\n    def(value, \"__v_skip\" /* SKIP */, true);\r\n    return value;\r\n}\n\nconst convert = (val) => isObject(val) ? reactive(val) : val;\r\nfunction isRef(r) {\r\n    return Boolean(r && r.__v_isRef === true);\r\n}\r\nfunction ref(value) {\r\n    return createRef(value);\r\n}\r\nfunction shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nclass RefImpl {\r\n    constructor(value, _shallow = false) {\r\n        this._shallow = _shallow;\r\n        this.__v_isRef = true;\r\n        this._rawValue = _shallow ? value : toRaw(value);\r\n        this._value = _shallow ? value : convert(value);\r\n    }\r\n    get value() {\r\n        track(toRaw(this), \"get\" /* GET */, 'value');\r\n        return this._value;\r\n    }\r\n    set value(newVal) {\r\n        newVal = this._shallow ? newVal : toRaw(newVal);\r\n        if (hasChanged(newVal, this._rawValue)) {\r\n            this._rawValue = newVal;\r\n            this._value = this._shallow ? newVal : convert(newVal);\r\n            trigger(toRaw(this), \"set\" /* SET */, 'value', newVal);\r\n        }\r\n    }\r\n}\r\nfunction createRef(rawValue, shallow = false) {\r\n    if (isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    return new RefImpl(rawValue, shallow);\r\n}\r\nfunction triggerRef(ref) {\r\n    trigger(toRaw(ref), \"set\" /* SET */, 'value', (process.env.NODE_ENV !== 'production') ? ref.value : void 0);\r\n}\r\nfunction unref(ref) {\r\n    return isRef(ref) ? ref.value : ref;\r\n}\r\nconst shallowUnwrapHandlers = {\r\n    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),\r\n    set: (target, key, value, receiver) => {\r\n        const oldValue = target[key];\r\n        if (isRef(oldValue) && !isRef(value)) {\r\n            oldValue.value = value;\r\n            return true;\r\n        }\r\n        else {\r\n            return Reflect.set(target, key, value, receiver);\r\n        }\r\n    }\r\n};\r\nfunction proxyRefs(objectWithRefs) {\r\n    return isReactive(objectWithRefs)\r\n        ? objectWithRefs\r\n        : new Proxy(objectWithRefs, shallowUnwrapHandlers);\r\n}\r\nclass CustomRefImpl {\r\n    constructor(factory) {\r\n        this.__v_isRef = true;\r\n        const { get, set } = factory(() => track(this, \"get\" /* GET */, 'value'), () => trigger(this, \"set\" /* SET */, 'value'));\r\n        this._get = get;\r\n        this._set = set;\r\n    }\r\n    get value() {\r\n        return this._get();\r\n    }\r\n    set value(newVal) {\r\n        this._set(newVal);\r\n    }\r\n}\r\nfunction customRef(factory) {\r\n    return new CustomRefImpl(factory);\r\n}\r\nfunction toRefs(object) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isProxy(object)) {\r\n        console.warn(`toRefs() expects a reactive object but received a plain one.`);\r\n    }\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (const key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nclass ObjectRefImpl {\r\n    constructor(_object, _key) {\r\n        this._object = _object;\r\n        this._key = _key;\r\n        this.__v_isRef = true;\r\n    }\r\n    get value() {\r\n        return this._object[this._key];\r\n    }\r\n    set value(newVal) {\r\n        this._object[this._key] = newVal;\r\n    }\r\n}\r\nfunction toRef(object, key) {\r\n    return isRef(object[key])\r\n        ? object[key]\r\n        : new ObjectRefImpl(object, key);\r\n}\n\nclass ComputedRefImpl {\r\n    constructor(getter, _setter, isReadonly) {\r\n        this._setter = _setter;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this.effect = effect(getter, {\r\n            lazy: true,\r\n            scheduler: () => {\r\n                if (!this._dirty) {\r\n                    this._dirty = true;\r\n                    trigger(toRaw(this), \"set\" /* SET */, 'value');\r\n                }\r\n            }\r\n        });\r\n        this[\"__v_isReadonly\" /* IS_READONLY */] = isReadonly;\r\n    }\r\n    get value() {\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        const self = toRaw(this);\r\n        if (self._dirty) {\r\n            self._value = this.effect();\r\n            self._dirty = false;\r\n        }\r\n        track(self, \"get\" /* GET */, 'value');\r\n        return self._value;\r\n    }\r\n    set value(newValue) {\r\n        this._setter(newValue);\r\n    }\r\n}\r\nfunction computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter = (process.env.NODE_ENV !== 'production')\r\n            ? () => {\r\n                console.warn('Write operation failed: computed value is readonly');\r\n            }\r\n            : NOOP;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    return new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);\r\n}\n\nexport { ITERATE_KEY, computed, customRef, effect, enableTracking, isProxy, isReactive, isReadonly, isRef, markRaw, pauseTracking, proxyRefs, reactive, readonly, ref, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, track, trigger, triggerRef, unref };\n","import { camelize, warn, callWithAsyncErrorHandling, getCurrentInstance, onMounted, watchEffect, onUpdated, Fragment, Static, h, BaseTransition, useTransitionState, toRaw, getTransitionRawChildren, setTransitionHooks, resolveTransitionHooks, createVNode, createRenderer, isRuntimeOnly, createHydrationRenderer } from '@vue/runtime-core';\nexport * from '@vue/runtime-core';\nimport { isString, isArray, hyphenate, capitalize, isSpecialBooleanAttr, isOn, isModelListener, isFunction, EMPTY_OBJ, extend, isObject, toNumber, invokeArrayFns, looseIndexOf, isSet, looseEqual, isHTMLTag, isSVGTag } from '@vue/shared';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst doc = (typeof document !== 'undefined' ? document : null);\r\nconst staticTemplateCache = new Map();\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        parent.insertBefore(child, anchor || null);\r\n    },\r\n    remove: child => {\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG, is, props) => {\r\n        const el = isSVG\r\n            ? doc.createElementNS(svgNS, tag)\r\n            : doc.createElement(tag, is ? { is } : undefined);\r\n        if (tag === 'select' && props && props.multiple != null) {\r\n            el.setAttribute('multiple', props.multiple);\r\n        }\r\n        return el;\r\n    },\r\n    createText: text => doc.createTextNode(text),\r\n    createComment: text => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: node => node.parentNode,\r\n    nextSibling: node => node.nextSibling,\r\n    querySelector: selector => doc.querySelector(selector),\r\n    setScopeId(el, id) {\r\n        el.setAttribute(id, '');\r\n    },\r\n    cloneNode(el) {\r\n        const cloned = el.cloneNode(true);\r\n        // #3072\r\n        // - in `patchDOMProp`, we store the actual value in the `el._value` property.\r\n        // - normally, elements using `:value` bindings will not be hoisted, but if\r\n        //   the bound value is a constant, e.g. `:value=\"true\"` - they do get\r\n        //   hoisted.\r\n        // - in production, hoisted nodes are cloned when subsequent inserts, but\r\n        //   cloneNode() does not copy the custom property we attached.\r\n        // - This may need to account for other custom DOM properties we attach to\r\n        //   elements in addition to `_value` in the future.\r\n        if (`_value` in el) {\r\n            cloned._value = el._value;\r\n        }\r\n        return cloned;\r\n    },\r\n    // __UNSAFE__\r\n    // Reason: innerHTML.\r\n    // Static content here can only come from compiled templates.\r\n    // As long as the user only uses trusted templates, this is safe.\r\n    insertStaticContent(content, parent, anchor, isSVG) {\r\n        // <parent> before | first ... last | anchor </parent>\r\n        const before = anchor ? anchor.previousSibling : parent.lastChild;\r\n        let template = staticTemplateCache.get(content);\r\n        if (!template) {\r\n            const t = doc.createElement('template');\r\n            t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;\r\n            template = t.content;\r\n            if (isSVG) {\r\n                // remove outer svg wrapper\r\n                const wrapper = template.firstChild;\r\n                while (wrapper.firstChild) {\r\n                    template.appendChild(wrapper.firstChild);\r\n                }\r\n                template.removeChild(wrapper);\r\n            }\r\n            staticTemplateCache.set(content, template);\r\n        }\r\n        parent.insertBefore(template.cloneNode(true), anchor);\r\n        return [\r\n            // first\r\n            before ? before.nextSibling : parent.firstChild,\r\n            // last\r\n            anchor ? anchor.previousSibling : parent.lastChild\r\n        ];\r\n    }\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding ['staticClass', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    // directly setting className should be faster than setAttribute in theory\r\n    // if this is an element during a transition, take the temporary transition\r\n    // classes into account.\r\n    const transitionClasses = el._vtc;\r\n    if (transitionClasses) {\r\n        value = (value\r\n            ? [value, ...transitionClasses]\r\n            : [...transitionClasses]).join(' ');\r\n    }\r\n    if (value == null) {\r\n        el.removeAttribute('class');\r\n    }\r\n    else if (isSVG) {\r\n        el.setAttribute('class', value);\r\n    }\r\n    else {\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    if (!next) {\r\n        el.removeAttribute('style');\r\n    }\r\n    else if (isString(next)) {\r\n        if (prev !== next) {\r\n            const current = style.display;\r\n            style.cssText = next;\r\n            // indicates that the `display` of the element is controlled by `v-show`,\r\n            // so we always keep the current `display` value regardless of the `style` value,\r\n            // thus handing over control to `v-show`.\r\n            if ('_vod' in el) {\r\n                style.display = current;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (const key in next) {\r\n            setStyle(style, key, next[key]);\r\n        }\r\n        if (prev && !isString(prev)) {\r\n            for (const key in prev) {\r\n                if (next[key] == null) {\r\n                    setStyle(style, key, '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nconst importantRE = /\\s*!important$/;\r\nfunction setStyle(style, name, val) {\r\n    if (isArray(val)) {\r\n        val.forEach(v => setStyle(style, name, v));\r\n    }\r\n    else {\r\n        if (name.startsWith('--')) {\r\n            // custom property definition\r\n            style.setProperty(name, val);\r\n        }\r\n        else {\r\n            const prefixed = autoPrefix(style, name);\r\n            if (importantRE.test(val)) {\r\n                // !important\r\n                style.setProperty(hyphenate(prefixed), val.replace(importantRE, ''), 'important');\r\n            }\r\n            else {\r\n                style[prefixed] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst prefixes = ['Webkit', 'Moz', 'ms'];\r\nconst prefixCache = {};\r\nfunction autoPrefix(style, rawName) {\r\n    const cached = prefixCache[rawName];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    let name = camelize(rawName);\r\n    if (name !== 'filter' && name in style) {\r\n        return (prefixCache[rawName] = name);\r\n    }\r\n    name = capitalize(name);\r\n    for (let i = 0; i < prefixes.length; i++) {\r\n        const prefixed = prefixes[i] + name;\r\n        if (prefixed in style) {\r\n            return (prefixCache[rawName] = prefixed);\r\n        }\r\n    }\r\n    return rawName;\r\n}\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nfunction patchAttr(el, key, value, isSVG, instance) {\r\n    if (isSVG && key.startsWith('xlink:')) {\r\n        if (value == null) {\r\n            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        // note we are only checking boolean attributes that don't have a\r\n        // corresponding dom prop of the same name here.\r\n        const isBoolean = isSpecialBooleanAttr(key);\r\n        if (value == null || (isBoolean && value === false)) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            el.setAttribute(key, isBoolean ? '' : value);\r\n        }\r\n    }\r\n}\n\n// __UNSAFE__\r\n// functions. The user is responsible for using them with only trusted content.\r\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if (key === 'innerHTML' || key === 'textContent') {\r\n        if (prevChildren) {\r\n            unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n        }\r\n        el[key] = value == null ? '' : value;\r\n        return;\r\n    }\r\n    if (key === 'value' && el.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n        if (value == null) {\r\n            el.removeAttribute(key);\r\n        }\r\n        return;\r\n    }\r\n    if (value === '' || value == null) {\r\n        const type = typeof el[key];\r\n        if (value === '' && type === 'boolean') {\r\n            // e.g. <select multiple> compiles to { multiple: '' }\r\n            el[key] = true;\r\n            return;\r\n        }\r\n        else if (value == null && type === 'string') {\r\n            // e.g. <div :id=\"null\">\r\n            el[key] = '';\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n        else if (type === 'number') {\r\n            // e.g. <img :width=\"null\">\r\n            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error\r\n            try {\r\n                el[key] = 0;\r\n            }\r\n            catch (_a) { }\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n    }\r\n    // some properties perform value validation and throw\r\n    try {\r\n        el[key] = value;\r\n    }\r\n    catch (e) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Failed setting prop \"${key}\" on <${el.tagName.toLowerCase()}>: ` +\r\n                `value ${value} is invalid.`, e);\r\n        }\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nlet _getNow = Date.now;\r\nlet skipTimestampCheck = false;\r\nif (typeof window !== 'undefined') {\r\n    // Determine what event timestamp the browser is using. Annoyingly, the\r\n    // timestamp can either be hi-res (relative to page load) or low-res\r\n    // (relative to UNIX epoch), so in order to compare time we have to use the\r\n    // same timestamp type when saving the flush timestamp.\r\n    if (_getNow() > document.createEvent('Event').timeStamp) {\r\n        // if the low-res timestamp which is bigger than the event timestamp\r\n        // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n        // and we need to use the hi-res version for event listeners as well.\r\n        _getNow = () => performance.now();\r\n    }\r\n    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation\r\n    // and does not fire microtasks in between event propagation, so safe to exclude.\r\n    const ffMatch = navigator.userAgent.match(/firefox\\/(\\d+)/i);\r\n    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p = Promise.resolve();\r\nconst reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p.then(reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\r\n    // vei = vue event invokers\r\n    const invokers = el._vei || (el._vei = {});\r\n    const existingInvoker = invokers[rawName];\r\n    if (nextValue && existingInvoker) {\r\n        // patch\r\n        existingInvoker.value = nextValue;\r\n    }\r\n    else {\r\n        const [name, options] = parseName(rawName);\r\n        if (nextValue) {\r\n            // add\r\n            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));\r\n            addEventListener(el, name, invoker, options);\r\n        }\r\n        else if (existingInvoker) {\r\n            // remove\r\n            removeEventListener(el, name, existingInvoker, options);\r\n            invokers[rawName] = undefined;\r\n        }\r\n    }\r\n}\r\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\r\nfunction parseName(name) {\r\n    let options;\r\n    if (optionsModifierRE.test(name)) {\r\n        options = {};\r\n        let m;\r\n        while ((m = name.match(optionsModifierRE))) {\r\n            name = name.slice(0, name.length - m[0].length);\r\n            options[m[0].toLowerCase()] = true;\r\n        }\r\n    }\r\n    return [hyphenate(name.slice(2)), options];\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        const timeStamp = e.timeStamp || _getNow();\r\n        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {\r\n            callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    invoker.attached = getNow();\r\n    return invoker;\r\n}\r\nfunction patchStopImmediatePropagation(e, value) {\r\n    if (isArray(value)) {\r\n        const originalStop = e.stopImmediatePropagation;\r\n        e.stopImmediatePropagation = () => {\r\n            originalStop.call(e);\r\n            e._stopped = true;\r\n        };\r\n        return value.map(fn => (e) => !e._stopped && fn(e));\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\n\nconst nativeOnRE = /^on[a-z]/;\r\nconst forcePatchProp = (_, key) => key === 'value';\r\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\r\n    switch (key) {\r\n        // special\r\n        case 'class':\r\n            patchClass(el, nextValue, isSVG);\r\n            break;\r\n        case 'style':\r\n            patchStyle(el, prevValue, nextValue);\r\n            break;\r\n        default:\r\n            if (isOn(key)) {\r\n                // ignore v-model listeners\r\n                if (!isModelListener(key)) {\r\n                    patchEvent(el, key, prevValue, nextValue, parentComponent);\r\n                }\r\n            }\r\n            else if (shouldSetAsProp(el, key, nextValue, isSVG)) {\r\n                patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n            }\r\n            else {\r\n                // special case for <input v-model type=\"checkbox\"> with\r\n                // :true-value & :false-value\r\n                // store value as dom properties since non-string values will be\r\n                // stringified.\r\n                if (key === 'true-value') {\r\n                    el._trueValue = nextValue;\r\n                }\r\n                else if (key === 'false-value') {\r\n                    el._falseValue = nextValue;\r\n                }\r\n                patchAttr(el, key, nextValue, isSVG);\r\n            }\r\n            break;\r\n    }\r\n};\r\nfunction shouldSetAsProp(el, key, value, isSVG) {\r\n    if (isSVG) {\r\n        // most keys must be set as attribute on svg elements to work\r\n        // ...except innerHTML\r\n        if (key === 'innerHTML') {\r\n            return true;\r\n        }\r\n        // or native onclick with function values\r\n        if (key in el && nativeOnRE.test(key) && isFunction(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // spellcheck and draggable are numerated attrs, however their\r\n    // corresponding DOM properties are actually booleans - this leads to\r\n    // setting it with a string \"false\" value leading it to be coerced to\r\n    // `true`, so we need to always treat them as attributes.\r\n    // Note that `contentEditable` doesn't have this problem: its DOM\r\n    // property is also enumerated string values.\r\n    if (key === 'spellcheck' || key === 'draggable') {\r\n        return false;\r\n    }\r\n    // #1787, #2840 form property on form elements is readonly and must be set as\r\n    // attribute.\r\n    if (key === 'form') {\r\n        return false;\r\n    }\r\n    // #1526 <input list> must be set as attribute\r\n    if (key === 'list' && el.tagName === 'INPUT') {\r\n        return false;\r\n    }\r\n    // #2766 <textarea type> must be set as attribute\r\n    if (key === 'type' && el.tagName === 'TEXTAREA') {\r\n        return false;\r\n    }\r\n    // native onclick with string value, must be set as attribute\r\n    if (nativeOnRE.test(key) && isString(value)) {\r\n        return false;\r\n    }\r\n    return key in el;\r\n}\n\nfunction useCssModule(name = '$style') {\r\n    /* istanbul ignore else */\r\n    {\r\n        const instance = getCurrentInstance();\r\n        if (!instance) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`useCssModule must be called inside setup()`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const modules = instance.type.__cssModules;\r\n        if (!modules) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`Current instance does not have CSS modules injected.`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const mod = modules[name];\r\n        if (!mod) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current instance does not have CSS module named \"${name}\".`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for SFC's CSS variable injection feature.\r\n * @private\r\n */\r\nfunction useCssVars(getter) {\r\n    const instance = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!instance) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`useCssVars is called without current active component instance.`);\r\n        return;\r\n    }\r\n    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));\r\n    onMounted(() => watchEffect(setVars, { flush: 'post' }));\r\n    onUpdated(setVars);\r\n}\r\nfunction setVarsOnVNode(vnode, vars) {\r\n    if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        const suspense = vnode.suspense;\r\n        vnode = suspense.activeBranch;\r\n        if (suspense.pendingBranch && !suspense.isHydrating) {\r\n            suspense.effects.push(() => {\r\n                setVarsOnVNode(suspense.activeBranch, vars);\r\n            });\r\n        }\r\n    }\r\n    // drill down HOCs until it's a non-component vnode\r\n    while (vnode.component) {\r\n        vnode = vnode.component.subTree;\r\n    }\r\n    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {\r\n        setVarsOnNode(vnode.el, vars);\r\n    }\r\n    else if (vnode.type === Fragment) {\r\n        vnode.children.forEach(c => setVarsOnVNode(c, vars));\r\n    }\r\n    else if (vnode.type === Static) {\r\n        let { el, anchor } = vnode;\r\n        while (el) {\r\n            setVarsOnNode(el, vars);\r\n            if (el === anchor)\r\n                break;\r\n            el = el.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction setVarsOnNode(el, vars) {\r\n    if (el.nodeType === 1) {\r\n        const style = el.style;\r\n        for (const key in vars) {\r\n            style.setProperty(`--${key}`, vars[key]);\r\n        }\r\n    }\r\n}\n\nconst TRANSITION = 'transition';\r\nconst ANIMATION = 'animation';\r\n// DOM Transition is a higher-order-component based on the platform-agnostic\r\n// base Transition component, with DOM-specific logic.\r\nconst Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);\r\nTransition.displayName = 'Transition';\r\nconst DOMTransitionPropsValidators = {\r\n    name: String,\r\n    type: String,\r\n    css: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    duration: [String, Number, Object],\r\n    enterFromClass: String,\r\n    enterActiveClass: String,\r\n    enterToClass: String,\r\n    appearFromClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    leaveFromClass: String,\r\n    leaveActiveClass: String,\r\n    leaveToClass: String\r\n};\r\nconst TransitionPropsValidators = (Transition.props = /*#__PURE__*/ extend({}, BaseTransition.props, DOMTransitionPropsValidators));\r\n/**\r\n * #3227 Incoming hooks may be merged into arrays when wrapping Transition\r\n * with custom HOCs.\r\n */\r\nconst callHook = (hook, args = []) => {\r\n    if (isArray(hook)) {\r\n        hook.forEach(h => h(...args));\r\n    }\r\n    else if (hook) {\r\n        hook(...args);\r\n    }\r\n};\r\n/**\r\n * Check if a hook expects a callback (2nd arg), which means the user\r\n * intends to explicitly control the end of the transition.\r\n */\r\nconst hasExplicitCallback = (hook) => {\r\n    return hook\r\n        ? isArray(hook)\r\n            ? hook.some(h => h.length > 1)\r\n            : hook.length > 1\r\n        : false;\r\n};\r\nfunction resolveTransitionProps(rawProps) {\r\n    const baseProps = {};\r\n    for (const key in rawProps) {\r\n        if (!(key in DOMTransitionPropsValidators)) {\r\n            baseProps[key] = rawProps[key];\r\n        }\r\n    }\r\n    if (rawProps.css === false) {\r\n        return baseProps;\r\n    }\r\n    const { name = 'v', type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;\r\n    const durations = normalizeDuration(duration);\r\n    const enterDuration = durations && durations[0];\r\n    const leaveDuration = durations && durations[1];\r\n    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;\r\n    const finishEnter = (el, isAppear, done) => {\r\n        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\r\n        done && done();\r\n    };\r\n    const finishLeave = (el, done) => {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n        done && done();\r\n    };\r\n    const makeEnterHook = (isAppear) => {\r\n        return (el, done) => {\r\n            const hook = isAppear ? onAppear : onEnter;\r\n            const resolve = () => finishEnter(el, isAppear, done);\r\n            callHook(hook, [el, resolve]);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\r\n                addTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n                if (!hasExplicitCallback(hook)) {\r\n                    whenTransitionEnds(el, type, enterDuration, resolve);\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return extend(baseProps, {\r\n        onBeforeEnter(el) {\r\n            callHook(onBeforeEnter, [el]);\r\n            addTransitionClass(el, enterFromClass);\r\n            addTransitionClass(el, enterActiveClass);\r\n        },\r\n        onBeforeAppear(el) {\r\n            callHook(onBeforeAppear, [el]);\r\n            addTransitionClass(el, appearFromClass);\r\n            addTransitionClass(el, appearActiveClass);\r\n        },\r\n        onEnter: makeEnterHook(false),\r\n        onAppear: makeEnterHook(true),\r\n        onLeave(el, done) {\r\n            const resolve = () => finishLeave(el, done);\r\n            addTransitionClass(el, leaveFromClass);\r\n            // force reflow so *-leave-from classes immediately take effect (#2593)\r\n            forceReflow();\r\n            addTransitionClass(el, leaveActiveClass);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, leaveFromClass);\r\n                addTransitionClass(el, leaveToClass);\r\n                if (!hasExplicitCallback(onLeave)) {\r\n                    whenTransitionEnds(el, type, leaveDuration, resolve);\r\n                }\r\n            });\r\n            callHook(onLeave, [el, resolve]);\r\n        },\r\n        onEnterCancelled(el) {\r\n            finishEnter(el, false);\r\n            callHook(onEnterCancelled, [el]);\r\n        },\r\n        onAppearCancelled(el) {\r\n            finishEnter(el, true);\r\n            callHook(onAppearCancelled, [el]);\r\n        },\r\n        onLeaveCancelled(el) {\r\n            finishLeave(el);\r\n            callHook(onLeaveCancelled, [el]);\r\n        }\r\n    });\r\n}\r\nfunction normalizeDuration(duration) {\r\n    if (duration == null) {\r\n        return null;\r\n    }\r\n    else if (isObject(duration)) {\r\n        return [NumberOf(duration.enter), NumberOf(duration.leave)];\r\n    }\r\n    else {\r\n        const n = NumberOf(duration);\r\n        return [n, n];\r\n    }\r\n}\r\nfunction NumberOf(val) {\r\n    const res = toNumber(val);\r\n    if ((process.env.NODE_ENV !== 'production'))\r\n        validateDuration(res);\r\n    return res;\r\n}\r\nfunction validateDuration(val) {\r\n    if (typeof val !== 'number') {\r\n        warn(`<transition> explicit duration is not a valid number - ` +\r\n            `got ${JSON.stringify(val)}.`);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn(`<transition> explicit duration is NaN - ` +\r\n            'the duration expression might be incorrect.');\r\n    }\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\r\n    (el._vtc ||\r\n        (el._vtc = new Set())).add(cls);\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\r\n    const { _vtc } = el;\r\n    if (_vtc) {\r\n        _vtc.delete(cls);\r\n        if (!_vtc.size) {\r\n            el._vtc = undefined;\r\n        }\r\n    }\r\n}\r\nfunction nextFrame(cb) {\r\n    requestAnimationFrame(() => {\r\n        requestAnimationFrame(cb);\r\n    });\r\n}\r\nlet endId = 0;\r\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\r\n    const id = (el._endId = ++endId);\r\n    const resolveIfNotStale = () => {\r\n        if (id === el._endId) {\r\n            resolve();\r\n        }\r\n    };\r\n    if (explicitTimeout) {\r\n        return setTimeout(resolveIfNotStale, explicitTimeout);\r\n    }\r\n    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);\r\n    if (!type) {\r\n        return resolve();\r\n    }\r\n    const endEvent = type + 'end';\r\n    let ended = 0;\r\n    const end = () => {\r\n        el.removeEventListener(endEvent, onEnd);\r\n        resolveIfNotStale();\r\n    };\r\n    const onEnd = (e) => {\r\n        if (e.target === el && ++ended >= propCount) {\r\n            end();\r\n        }\r\n    };\r\n    setTimeout(() => {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(endEvent, onEnd);\r\n}\r\nfunction getTransitionInfo(el, expectedType) {\r\n    const styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    const getStyleProperties = (key) => (styles[key] || '').split(', ');\r\n    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');\r\n    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');\r\n    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    const animationDelays = getStyleProperties(ANIMATION + 'Delay');\r\n    const animationDurations = getStyleProperties(ANIMATION + 'Duration');\r\n    const animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    let type = null;\r\n    let timeout = 0;\r\n    let propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    const hasTransform = type === TRANSITION &&\r\n        /\\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);\r\n    return {\r\n        type,\r\n        timeout,\r\n        propCount,\r\n        hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\r\n// numbers in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down\r\n// (i.e. acting as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000;\r\n}\r\n// synchronously force layout to put elements into a certain state\r\nfunction forceReflow() {\r\n    return document.body.offsetHeight;\r\n}\n\nconst positionMap = new WeakMap();\r\nconst newPositionMap = new WeakMap();\r\nconst TransitionGroupImpl = {\r\n    name: 'TransitionGroup',\r\n    props: /*#__PURE__*/ extend({}, TransitionPropsValidators, {\r\n        tag: String,\r\n        moveClass: String\r\n    }),\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevChildren;\r\n        let children;\r\n        onUpdated(() => {\r\n            // children is guaranteed to exist after initial render\r\n            if (!prevChildren.length) {\r\n                return;\r\n            }\r\n            const moveClass = props.moveClass || `${props.name || 'v'}-move`;\r\n            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\r\n                return;\r\n            }\r\n            // we divide the work into three loops to avoid mixing DOM reads and writes\r\n            // in each iteration - which helps prevent layout thrashing.\r\n            prevChildren.forEach(callPendingCbs);\r\n            prevChildren.forEach(recordPosition);\r\n            const movedChildren = prevChildren.filter(applyTranslation);\r\n            // force reflow to put everything in position\r\n            forceReflow();\r\n            movedChildren.forEach(c => {\r\n                const el = c.el;\r\n                const style = el.style;\r\n                addTransitionClass(el, moveClass);\r\n                style.transform = style.webkitTransform = style.transitionDuration = '';\r\n                const cb = (el._moveCb = (e) => {\r\n                    if (e && e.target !== el) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el.removeEventListener('transitionend', cb);\r\n                        el._moveCb = null;\r\n                        removeTransitionClass(el, moveClass);\r\n                    }\r\n                });\r\n                el.addEventListener('transitionend', cb);\r\n            });\r\n        });\r\n        return () => {\r\n            const rawProps = toRaw(props);\r\n            const cssTransitionProps = resolveTransitionProps(rawProps);\r\n            let tag = rawProps.tag || Fragment;\r\n            prevChildren = children;\r\n            children = slots.default ? getTransitionRawChildren(slots.default()) : [];\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child.key != null) {\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`<TransitionGroup> children must be keyed.`);\r\n                }\r\n            }\r\n            if (prevChildren) {\r\n                for (let i = 0; i < prevChildren.length; i++) {\r\n                    const child = prevChildren[i];\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                    positionMap.set(child, child.el.getBoundingClientRect());\r\n                }\r\n            }\r\n            return createVNode(tag, null, children);\r\n        };\r\n    }\r\n};\r\nconst TransitionGroup = TransitionGroupImpl;\r\nfunction callPendingCbs(c) {\r\n    const el = c.el;\r\n    if (el._moveCb) {\r\n        el._moveCb();\r\n    }\r\n    if (el._enterCb) {\r\n        el._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    newPositionMap.set(c, c.el.getBoundingClientRect());\r\n}\r\nfunction applyTranslation(c) {\r\n    const oldPos = positionMap.get(c);\r\n    const newPos = newPositionMap.get(c);\r\n    const dx = oldPos.left - newPos.left;\r\n    const dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        const s = c.el.style;\r\n        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\r\n        s.transitionDuration = '0s';\r\n        return c;\r\n    }\r\n}\r\nfunction hasCSSTransform(el, root, moveClass) {\r\n    // Detect whether an element with the move class applied has\r\n    // CSS transitions. Since the element may be inside an entering\r\n    // transition at this very moment, we make a clone of it and remove\r\n    // all other transition classes applied to ensure only the move class\r\n    // is applied.\r\n    const clone = el.cloneNode();\r\n    if (el._vtc) {\r\n        el._vtc.forEach(cls => {\r\n            cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\r\n        });\r\n    }\r\n    moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\r\n    clone.style.display = 'none';\r\n    const container = (root.nodeType === 1\r\n        ? root\r\n        : root.parentNode);\r\n    container.appendChild(clone);\r\n    const { hasTransform } = getTransitionInfo(clone);\r\n    container.removeChild(clone);\r\n    return hasTransform;\r\n}\n\nconst getModelAssigner = (vnode) => {\r\n    const fn = vnode.props['onUpdate:modelValue'];\r\n    return isArray(fn) ? value => invokeArrayFns(fn, value) : fn;\r\n};\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        trigger(target, 'input');\r\n    }\r\n}\r\nfunction trigger(el, type) {\r\n    const e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    created(el, { modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        const castToNumber = number || el.type === 'number';\r\n        addEventListener(el, lazy ? 'change' : 'input', e => {\r\n            if (e.target.composing)\r\n                return;\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            el._assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, 'change', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, 'compositionstart', onCompositionStart);\r\n            addEventListener(el, 'compositionend', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires \"change\" instead of \"input\" on autocomplete.\r\n            addEventListener(el, 'change', onCompositionEnd);\r\n        }\r\n    },\r\n    // set value on mounted so it's after min/max for type=\"range\"\r\n    mounted(el, { value }) {\r\n        el.value = value == null ? '' : value;\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        // avoid clearing unresolved text. #2302\r\n        if (el.composing)\r\n            return;\r\n        if (document.activeElement === el) {\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === 'number') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    // #4096 array checkboxes need to be deep traversed\r\n    deep: true,\r\n    created(el, _, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            const assign = el._assign;\r\n            if (isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else if (isSet(modelValue)) {\r\n                const cloned = new Set(modelValue);\r\n                if (checked) {\r\n                    cloned.add(elementValue);\r\n                }\r\n                else {\r\n                    cloned.delete(elementValue);\r\n                }\r\n                assign(cloned);\r\n            }\r\n            else {\r\n                assign(getCheckboxValue(el, checked));\r\n            }\r\n        });\r\n    },\r\n    // set initial checked on mount to wait for true-value/false-value\r\n    mounted: setChecked,\r\n    beforeUpdate(el, binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        setChecked(el, binding, vnode);\r\n    }\r\n};\r\nfunction setChecked(el, { value, oldValue }, vnode) {\r\n    el._modelValue = value;\r\n    if (isArray(value)) {\r\n        el.checked = looseIndexOf(value, vnode.props.value) > -1;\r\n    }\r\n    else if (isSet(value)) {\r\n        el.checked = value.has(vnode.props.value);\r\n    }\r\n    else if (value !== oldValue) {\r\n        el.checked = looseEqual(value, getCheckboxValue(el, true));\r\n    }\r\n}\r\nconst vModelRadio = {\r\n    created(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            el._assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value, oldValue }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        if (value !== oldValue) {\r\n            el.checked = looseEqual(value, vnode.props.value);\r\n        }\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    // <select multiple> value need to be deep traversed\r\n    deep: true,\r\n    created(el, { value, modifiers: { number } }, vnode) {\r\n        const isSetModel = isSet(value);\r\n        addEventListener(el, 'change', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map((o) => number ? toNumber(getValue(o)) : getValue(o));\r\n            el._assign(el.multiple\r\n                ? isSetModel\r\n                    ? new Set(selectedVal)\r\n                    : selectedVal\r\n                : selectedVal[0]);\r\n        });\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    // set value in mounted & updated because <select> relies on its children\r\n    // <option>s.\r\n    mounted(el, { value }) {\r\n        setSelected(el, value);\r\n    },\r\n    beforeUpdate(el, _binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !isArray(value) && !isSet(value)) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`<select multiple v-model> expects an Array or Set value for its binding, ` +\r\n                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            if (isArray(value)) {\r\n                option.selected = looseIndexOf(value, optionValue) > -1;\r\n            }\r\n            else {\r\n                option.selected = value.has(optionValue);\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                if (el.selectedIndex !== i)\r\n                    el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple && el.selectedIndex !== -1) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return '_value' in el ? el._value : el.value;\r\n}\r\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\r\nfunction getCheckboxValue(el, checked) {\r\n    const key = checked ? '_trueValue' : '_falseValue';\r\n    return key in el ? el[key] : checked;\r\n}\r\nconst vModelDynamic = {\r\n    created(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'created');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'mounted');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'updated');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case 'SELECT':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case 'TEXTAREA':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (vnode.props && vnode.props.type) {\r\n                case 'checkbox':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case 'radio':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrow-up',\r\n    left: 'arrow-left',\r\n    right: 'arrow-right',\r\n    down: 'arrow-down',\r\n    delete: 'backspace'\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!('key' in event)) {\r\n            return;\r\n        }\r\n        const eventKey = hyphenate(event.key);\r\n        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return fn(event);\r\n        }\r\n    };\r\n};\n\nconst vShow = {\r\n    beforeMount(el, { value }, { transition }) {\r\n        el._vod = el.style.display === 'none' ? '' : el.style.display;\r\n        if (transition && value) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    mounted(el, { value }, { transition }) {\r\n        if (transition && value) {\r\n            transition.enter(el);\r\n        }\r\n    },\r\n    updated(el, { value, oldValue }, { transition }) {\r\n        if (!value === !oldValue)\r\n            return;\r\n        if (transition) {\r\n            if (value) {\r\n                transition.beforeEnter(el);\r\n                setDisplay(el, true);\r\n                transition.enter(el);\r\n            }\r\n            else {\r\n                transition.leave(el, () => {\r\n                    setDisplay(el, false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    beforeUnmount(el, { value }) {\r\n        setDisplay(el, value);\r\n    }\r\n};\r\nfunction setDisplay(el, value) {\r\n    el.style.display = value ? el._vod : 'none';\r\n}\n\nconst rendererOptions = extend({ patchProp, forcePatchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return renderer || (renderer = createRenderer(rendererOptions));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nconst render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nconst hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nconst createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!isFunction(component) && !component.render && !component.template) {\r\n            // __UNSAFE__\r\n            // Reason: potential execution of JS expressions in in-DOM template.\r\n            // The user must make sure the in-DOM template is trusted. If it's\r\n            // rendered by the server, the template should not contain any user data.\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        const proxy = mount(container, false, container instanceof SVGElement);\r\n        if (container instanceof Element) {\r\n            container.removeAttribute('v-cloak');\r\n            container.setAttribute('data-v-app', '');\r\n        }\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nconst createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true, container instanceof SVGElement);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, 'isNativeTag', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\n// dev only\r\nfunction injectCompilerOptionsCheck(app) {\r\n    if (isRuntimeOnly()) {\r\n        const isCustomElement = app.config.isCustomElement;\r\n        Object.defineProperty(app.config, 'isCustomElement', {\r\n            get() {\r\n                return isCustomElement;\r\n            },\r\n            set() {\r\n                warn(`The \\`isCustomElement\\` config option is deprecated. Use ` +\r\n                    `\\`compilerOptions.isCustomElement\\` instead.`);\r\n            }\r\n        });\r\n        const compilerOptions = app.config.compilerOptions;\r\n        const msg = `The \\`compilerOptions\\` config option is only respected when using ` +\r\n            `a build of Vue.js that includes the runtime compiler (aka \"full build\"). ` +\r\n            `Since you are using the runtime-only build, \\`compilerOptions\\` ` +\r\n            `must be passed to \\`@vue/compiler-dom\\` in the build setup instead.\\n` +\r\n            `- For vue-loader: pass it via vue-loader's \\`compilerOptions\\` loader option.\\n` +\r\n            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n` +\r\n            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;\r\n        Object.defineProperty(app.config, 'compilerOptions', {\r\n            get() {\r\n                warn(msg);\r\n                return compilerOptions;\r\n            },\r\n            set() {\r\n                warn(msg);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if ((process.env.NODE_ENV !== 'production') && !res) {\r\n            warn(`Failed to mount app: mount target selector \"${container}\" returned null.`);\r\n        }\r\n        return res;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        container instanceof window.ShadowRoot &&\r\n        container.mode === 'closed') {\r\n        warn(`mounting on a ShadowRoot with \\`{mode: \"closed\"}\\` may lead to unpredictable bugs`);\r\n    }\r\n    return container;\r\n}\n\nexport { Transition, TransitionGroup, createApp, createSSRApp, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers };\n","/** api 配置\r\n */\r\nexport const config = {\r\n    /** 会在 api 请求路径的前面加上这个字段的值 */\r\n    server: \"\",\r\n    /**\r\n     * 对api上方法的调用是否开启缓存，如果需要支持 OceanPress 请开启此选项\r\n     * @defaultValue true\r\n     */\r\n    apiCache: false,\r\n};\r\n","/**\r\n * @example\r\n * ```\r\n * htmlDecode(\"{&quot;source&quot;:&quot;&quot;}\")\r\n * // '{\"source\":\"\"}'\r\n * ```\r\n */\r\nexport function htmlDecode(input) {\r\n    var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n    return doc.documentElement.textContent;\r\n}\r\n","export function getCurrentEnv() {\r\n    if (querySelector(`main[data-n-id]`)) {\r\n        return getCurrentEnv.env.oceanPress;\r\n    }\r\n    else if (querySelector(`.protyle-content`) &&\r\n        querySelector(`[data-node-id]`)) {\r\n        return getCurrentEnv.env.siYuan;\r\n    }\r\n    return getCurrentEnv.env.unknown;\r\n}\r\n(function (getCurrentEnv) {\r\n    let env;\r\n    (function (env) {\r\n        env[\"siYuan\"] = \"siYuan\";\r\n        env[\"oceanPress\"] = \"oceanPress\";\r\n        env[\"unknown\"] = \"unknown\";\r\n    })(env = getCurrentEnv.env || (getCurrentEnv.env = {}));\r\n})(getCurrentEnv || (getCurrentEnv = {}));\r\nfunction querySelector(selectors) {\r\n    return self.parent?.document.querySelector(selectors);\r\n}\r\n","import { getCurrentEnv } from \"./env\";\r\n/** 获取当前挂件块的 id */\r\nexport function currentNodeId() {\r\n    const env = getCurrentEnv();\r\n    if (env === getCurrentEnv.env.oceanPress) {\r\n        return self.frameElement?.parentElement?.dataset.nId;\r\n    }\r\n    else if (env === getCurrentEnv.env.siYuan) {\r\n        return self.frameElement?.parentElement?.parentElement?.dataset.nodeId;\r\n    }\r\n    else if (env === getCurrentEnv.env.unknown) {\r\n    }\r\n    else {\r\n        const exhaustiveCheck = env;\r\n    }\r\n    return undefined;\r\n}\r\n","import { config } from \"../config\";\r\n/** 负责所有请求的一些重复性工作，以及充当请求切面\r\n * 默认配置为 post 请求，以及接受 json 类型的值\r\n */\r\nexport function fetch_proxy(...[input, init]) {\r\n    if (typeof input === \"string\") {\r\n        input = config.server + input;\r\n    }\r\n    if (init === undefined) {\r\n        init = {};\r\n    }\r\n    else {\r\n        const defaultParma = {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        };\r\n        for (const key in defaultParma) {\r\n            if (key in init === false) {\r\n                //@ts-ignore 懒得写类型了\r\n                init[key] = defaultParma[key];\r\n            }\r\n        }\r\n    }\r\n    return fetch(input, init)\r\n        .then(async (response) => {\r\n        const r = await response.json();\r\n        if (r.code !== 0) {\r\n            return Promise.reject(r);\r\n        }\r\n        else {\r\n            return r;\r\n        }\r\n    })\r\n        .catch((error) => console.log(\"error\", error));\r\n}\r\n","import { fetch_proxy } from \"../util/fetch-aop\";\r\n/**\r\n * 对 post /api/query/sql 接口的包装\r\n */\r\nexport function sqlQuery(/** sql 查询语句 */ stmt) {\r\n    const raw = JSON.stringify({\r\n        stmt,\r\n    });\r\n    return fetch_proxy(\"/api/query/sql\", { body: raw });\r\n}\r\n(function (sqlQuery) {\r\n    sqlQuery.noCache = false;\r\n})(sqlQuery || (sqlQuery = {}));\r\n","import { htmlDecode } from \"../util/index\";\r\nimport { fetch_proxy } from \"../util/fetch-aop\";\r\nimport { sqlQuery } from \"./sql\";\r\n// 维持 htmlDecode 的导入，用于 @link\r\nhtmlDecode.toString();\r\n/**\r\n * 此函数默认不被 cache\r\n */\r\nexport function setBlockAttrs(p) {\r\n    const raw = JSON.stringify(p);\r\n    return fetch_proxy(\"/api/attr/setBlockAttrs\", { body: raw });\r\n}\r\n(function (setBlockAttrs) {\r\n    setBlockAttrs.noCache = true;\r\n})(setBlockAttrs || (setBlockAttrs = {}));\r\n/**\r\n * 查询块属性\r\n * 在查询自身时该怎么 cache ，如果直接  cache 会导致无限增长\r\n * tips: 可以使用 {@link htmlDecode util.htmlDecode} 对 {@link attrRow} 的 value 进行解码\r\n */\r\nexport async function getBlockAttrs(id) {\r\n    const r = sqlQuery(`SELECT * FROM \"attributes\" WHERE block_id='${id}'`);\r\n    return r;\r\n}\r\n(function (getBlockAttrs) {\r\n    getBlockAttrs.noCache = false;\r\n})(getBlockAttrs || (getBlockAttrs = {}));\r\n/** 查询单个属性 */\r\nexport async function getBlockAttr(id, name) {\r\n    const attrs = (await getBlockAttrs(id)).data;\r\n    return attrs.find((el) => el.name === name);\r\n}\r\n(function (getBlockAttr) {\r\n    getBlockAttr.noCache = false;\r\n})(getBlockAttr || (getBlockAttr = {}));\r\n","import { config } from \"../config\";\r\nimport { setBlockAttrs } from \"../siyuan-api/attr\";\r\nimport { currentNodeId } from \"../util/current-node-id\";\r\nimport { getCurrentEnv } from \"../util/env\";\r\n/**\r\n * 接受一个函数，返回一个新函数，新函数的调用在非思源环境下会使用缓存的结果，不会实际运行传入的函数\r\n * 参数以及返回值需要可使用 JSON.stringify\r\n */\r\nfunction cache(f) {\r\n    return (async (...arg) => {\r\n        if (config.apiCache &&\r\n            !f.noCache &&\r\n            getCurrentEnv() === getCurrentEnv.env.siYuan) {\r\n            const r = await f(...arg);\r\n            const id = currentNodeId();\r\n            if (id) {\r\n                const key = getCacheKey(f, arg);\r\n                setBlockAttrs({\r\n                    id,\r\n                    attrs: {\r\n                        [key]: JSON.stringify(r),\r\n                    },\r\n                });\r\n            }\r\n            return r;\r\n        }\r\n        else {\r\n            if (getCurrentEnv() !== getCurrentEnv.env.siYuan) {\r\n                return cacheExtract(f, arg);\r\n            }\r\n            else {\r\n                return f(...arg);\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function cacheWarp(p) {\r\n    const warp = {};\r\n    for (const key in p) {\r\n        if (Object.prototype.hasOwnProperty.call(p, key)) {\r\n            const element = p[key];\r\n            if (typeof element === \"function\") {\r\n                //@ts-ignore 这里类型比较复杂，不想写\r\n                warp[key] = cache(element);\r\n            }\r\n            else {\r\n                warp[key] = element;\r\n            }\r\n        }\r\n    }\r\n    return warp;\r\n}\r\n/** 从缓存提取以前对此参数调用的结果 */\r\nfunction cacheExtract(f, arg) {\r\n    const key = getCacheKey(f, arg);\r\n    const env = getCurrentEnv();\r\n    if (env === getCurrentEnv.env.siYuan) {\r\n        // cache 函数内的代码应该保证不会走到这个分支\r\n    }\r\n    else if (env === getCurrentEnv.env.unknown) {\r\n        // 未知环境不管它\r\n    }\r\n    else if (env === getCurrentEnv.env.oceanPress) {\r\n        const code = self.frameElement.parentElement.getAttribute(key) || \"\";\r\n        return JSON.parse(code || \"\");\r\n    }\r\n    else {\r\n        const exhaustiveCheck = env;\r\n    }\r\n}\r\nfunction getCacheKey(f, arg) {\r\n    /** 这里本来是 custom-call 改成 z 是为了在思源内的属性面板中排最后 对于用户来说应该不会很关心这里的数据 */\r\n    return `custom-z-${f.name.toLowerCase()}-${cyrb53(`${f.name}__${JSON.stringify(arg)}`)}`;\r\n}\r\n//@ts-ignore 代码来自于 https://stackoverflow.com/a/52171480\r\nconst cyrb53 = function (str, seed = 0) {\r\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n    for (let i = 0, ch; i < str.length; i++) {\r\n        ch = str.charCodeAt(i);\r\n        h1 = Math.imul(h1 ^ ch, 2654435761);\r\n        h2 = Math.imul(h2 ^ ch, 1597334677);\r\n    }\r\n    h1 =\r\n        Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\r\n            Math.imul(h2 ^ (h2 >>> 13), 3266489909);\r\n    h2 =\r\n        Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\r\n            Math.imul(h1 ^ (h1 >>> 13), 3266489909);\r\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\r\n};\r\n","import { cacheWarp } from \"./cache/api-cache\";\r\nimport * as siYuanApi from \"./siyuan-api/index\";\r\n/**\r\n * 这里面是对于思源一些 api 的包装\r\n * 查询类的 api 默认会进行缓存，非查询类的 api 则不会，可以通过查看函数的 noCache 属性来分辨\r\n * （非查询类的 api 如果进行 cache 很容易导致过多的数据被缓存到挂件块的自定义属性，查询类的 api 也需要使用者自行斟酌，）\r\n */\r\nexport const api = cacheWarp(siYuanApi);\r\n/** 一些工具方法 */\r\nexport * as util from \"./util/index\";\r\n/** 配置项 */\r\nexport * from \"./config\";\r\n"],"names":["makeMap","str","expectsLowerCase","map","Object","create","list","split","i","length","val","toLowerCase","disableTracking","blockStack","push","currentBlock","type","props","children","patchFlag","dynamicProps","vnode","createVNode","dynamicChildren","isBlockTreeEnabled","EMPTY_ARR","pop","options","isFunction$1","setup","name","value","rawValue","shallow","isRef","RefImpl","createRef","effect","doWatch","isGloballyWhitelisted","isSpecialBooleanAttr","normalizeStyle","isArray","res","item","normalized","isString","parseStringStyle","key","isObject","listDelimiterRE","propertyDelimiterRE","cssText","ret","forEach","tmp","trim","normalizeClass","EMPTY_OBJ","NOOP","NO","onRE","isOn","test","isModelListener","startsWith","extend","assign","remove","arr","el","indexOf","splice","hasOwnProperty","prototype","hasOwn","call","Array","isMap","toTypeString","isFunction","isSymbol","isPromise","then","catch","objectToString","toString","isIntegerKey","parseInt","isReservedProp","cacheStringFunction","fn","cache","camelizeRE","camelize","replace","_","c","toUpperCase","hyphenateRE","hyphenate","capitalize","charAt","slice","toHandlerKey","hasChanged","oldValue","invokeArrayFns","fns","arg","def","obj","defineProperty","configurable","enumerable","toNumber","n","parseFloat","isNaN","targetMap","WeakMap","effectStack","activeEffect","ITERATE_KEY","Symbol","MAP_KEY_ITERATE_KEY","_isEffect","isEffect","raw","active","includes","cleanup","trackStack","shouldTrack","resetTracking","id","uid","allowRecurse","deps","createReactiveEffect","lazy","stop","onStop","delete","pauseTracking","last","undefined","track","target","depsMap","get","set","Map","dep","Set","has","add","trigger","newValue","oldTarget","effects","effectsToAdd","scheduler","isNonTrackableKeys","builtInSymbols","getOwnPropertyNames","filter","createGetter","shallowGet","readonlyGet","arrayInstrumentations","createArrayInstrumentations","instrumentations","args","toRaw","this","l","apply","isReadonly","receiver","shallowReadonlyMap","readonlyMap","shallowReactiveMap","reactiveMap","targetIsArray","Reflect","readonly","reactive","createSetter","hadKey","Number","result","mutableHandlers","deleteProperty","ownKeys","readonlyHandlers","shallowReactiveHandlers","toReactive","toReadonly","toShallow","getProto","v","getPrototypeOf","get$1","isShallow","rawTarget","rawKey","wrap","has$1","size","set$1","deleteEntry","clear","hadItems","createForEach","callback","thisArg","observed","createIterableMethod","method","targetIsMap","isPair","iterator","isKeyOnly","innerIterator","next","done","createReadonlyMethod","createInstrumentations","mutableInstrumentations","shallowInstrumentations","readonlyInstrumentations","shallowReadonlyInstrumentations","createInstrumentationGetter","mutableCollectionHandlers","shallowCollectionHandlers","readonlyCollectionHandlers","getTargetType","isExtensible","rawType","targetTypeMap","toRawType","createReactiveObject","baseHandlers","collectionHandlers","proxyMap","existingProxy","targetType","proxy","Proxy","isReactive","isProxy","markRaw","convert","r","Boolean","__v_isRef","constructor","_shallow","_rawValue","_value","newVal","unref","ref","shallowUnwrapHandlers","proxyRefs","objectWithRefs","ComputedRefImpl","getter","_setter","_dirty","self","callWithErrorHandling","instance","err","handleError","callWithAsyncErrorHandling","isPromise$1","values","throwInDev","cur","parent","exposedInstance","errorInfo","errorCapturedHooks","ec","appErrorHandler","appContext","config","errorHandler","contextVNode","console","error","logError","isFlushing","isFlushPending","queue","flushIndex","pendingPreFlushCbs","activePreFlushCbs","preFlushIndex","pendingPostFlushCbs","activePostFlushCbs","postFlushIndex","resolvedPromise","Promise","resolve","currentFlushPromise","currentPreFlushParentJob","nextTick","p","bind","queueJob","job","pos","start","end","jobId","getId","middle","findInsertionIndex","queueFlush","flushJobs","queueCb","cb","activeQueue","pendingQueue","index","flushPreFlushCbs","seen","parentJob","flushPostFlushCbs","deduped","sort","a","b","Infinity","emit","event","rawArgs","modelArg","modifiersKey","number","handlerName","handler","onceHandler","emitted","normalizeEmitsOptions","comp","asMixin","emitsCache","cached","emits","hasExtends","extendEmits","normalizedFromExtend","mixins","extends","isEmitListener","currentRenderingInstance","currentScopeId","setCurrentRenderingInstance","prev","__scopeId","renderComponentRoot","Component","withProxy","propsOptions","slots","attrs","render","renderCache","data","setupState","ctx","inheritAttrs","fallthroughAttrs","shapeFlag","proxyToUse","normalizeVNode","getFunctionalFallthrough","root","keys","some","filterModelListeners","cloneVNode","dirs","concat","transition","Comment$1","hasPropsChanged","prevProps","nextProps","emitsOptions","nextKeys","inject","defaultValue","treatDefaultAsFactory","currentInstance","provides","arguments","INITIAL_WATCHER_VALUE","watch","source","immediate","deep","flush","onTrack","onTrigger","forceTrigger","isMultiSource","s","traverse","isUnmounted","onInvalidate","baseGetter","runner","queuePostRenderEffect","suspense","isMounted","queuePreFlushCb","recordInstanceBoundEffect","instanceWatch","publicThis","createPathGetter","path","segments","isObject$1","isPlainObject","isAsyncWrapper","__asyncLoader","isKeepAlive","__isKeepAlive","onActivated","hook","registerKeepAliveHook","onDeactivated","wrappedHook","__wdc","current","isDeactivated","injectHook","injectToKeepAliveRoot","keepAliveRoot","injected","onUnmounted","prepend","hooks","__weh","setCurrentInstance","unshift","createHook","lifecycle","isInSSRComponentSetup","onBeforeMount","onMounted","onBeforeUpdate","onUpdated","onBeforeUnmount","onServerPrefetch","onRenderTriggered","onRenderTracked","onErrorCaptured","shouldCacheAccess","applyOptions","resolveMergedOptions","beforeCreate","callHook","dataOptions","computed","computedOptions","methods","watchOptions","provide","provideOptions","injectOptions","created","beforeMount","mounted","beforeUpdate","updated","activated","deactivated","beforeDestroy","beforeUnmount","destroyed","unmounted","renderTracked","renderTriggered","errorCaptured","serverPrefetch","expose","components","directives","filters","checkDuplicateProperties","normalizeInject","opt","from","default","resolveInjections","methodHandler","createWatcher","parentProvides","registerLifecycleHook","register","_hook","exposed","h","base","extendsOptions","globalMixins","optionsCache","optionMergeStrategies","resolved","m","mergeOptions","to","strats","strat","internalOptionMergeStrats","mergeDataFn","mergeObjectOptions","mergeAsArray","merged","initProps","rawProps","isStateful","isSSR","InternalObjectKey","propsDefaults","setFullProps","needCastKeys","rawCastValues","hasAttrsChanged","camelKey","rawCurrentProps","castValues","resolvePropValue","isAbsent","hasDefault","Function","normalizePropsOptions","propsCache","extendProps","normalizedKey","validatePropName","prop","booleanIndex","getTypeIndex","stringIndex","String","getType","ctor","match","isSameType","expectedTypes","findIndex","t","isInternalKey","normalizeSlotValue","normalizeSlot","rawSlot","isNonScopedSlot","_n","renderFnWithContext","_d","setBlockTracking","prevInstance","_c","withCtx","normalizeObjectSlots","rawSlots","_ctx","normalizeVNodeSlots","invokeDirectiveHook","prevVNode","bindings","oldBindings","binding","dir","createAppContext","app","isNativeTag","performance","globalProperties","warnHandler","compilerOptions","createAppAPI","hydrate","rootComponent","rootProps","context","installedPlugins","_uid","_component","_props","_container","_context","_instance","version","use","plugin","install","mixin","component","directive","mount","rootContainer","isHydrate","isSVG","__vue_app__","unmount","prodEffectOptions","pendingBranch","setRef","rawRef","oldRawRef","parentSuspense","isUnmount","refValue","getExposeProxy","owner","oldRef","refs","doSet","createRenderer","createHydrationFns","insert","hostInsert","hostRemove","patchProp","hostPatchProp","forcePatchProp","hostForcePatchProp","createElement","hostCreateElement","createText","hostCreateText","createComment","hostCreateComment","setText","hostSetText","setElementText","hostSetElementText","parentNode","hostParentNode","nextSibling","hostNextSibling","setScopeId","hostSetScopeId","cloneNode","hostCloneNode","insertStaticContent","hostInsertStaticContent","patch","n1","n2","container","anchor","parentComponent","slotScopeIds","optimized","isSameVNodeType","getNextHostNode","Text","processText","processCommentNode","Static","mountStaticNode","Fragment","processFragment","processElement","processComponent","process","internals","moveStaticNode","removeStaticNode","mountElement","patchElement","vnodeHook","is","mountChildren","unmountChildren","onVnodeBeforeMount","invokeVNodeHook","scopeId","needCallTransitionHooks","persisted","beforeEnter","onVnodeMounted","enter","subTree","parentVNode","child","cloneIfMounted","oldProps","newProps","onVnodeBeforeUpdate","patchProps","class","style","propsToUpdate","areChildrenSVG","patchBlockChildren","patchChildren","onVnodeUpdated","oldChildren","newChildren","fallbackContainer","oldVNode","newVNode","fragmentStartAnchor","fragmentEndAnchor","fragmentSlotScopeIds","traverseStaticChildren","activate","mountComponent","updateComponent","initialVNode","emptyAppContext","uid$1","update","exposeProxy","accessCache","setupContext","suspenseId","pendingId","asyncDep","asyncResolved","bc","bm","bu","u","um","bum","da","rtg","rtc","sp","createComponentInstance","renderer","isStatefulComponent","initSlots","PublicInstanceProxyHandlers","createSetupContext","setupResult","unsetInstance","resolvedResult","handleSetupResult","e","finishComponentSetup","setupStatefulComponent","setupComponent","registerDep","setupRenderEffect","placeholder","nextVNode","prevChildren","nextChildren","$stable","shouldUpdateComponent","updateComponentPreRender","invalidateJob","originNext","nextTree","prevTree","updateHOCHostEl","hydrateNode","hydrateSubTree","scopedInitialVNode","rawPrevProps","kebabKey","camelizedKey","updateProps","needDeletionCheck","deletionComparisonTarget","updateSlots","c1","prevShapeFlag","c2","patchKeyedChildren","patchUnkeyedChildren","oldLength","newLength","commonLength","Math","min","nextChild","parentAnchor","l2","e1","e2","nextPos","s1","s2","keyToNewIndexMap","j","patched","toBePatched","moved","maxNewIndexSoFar","newIndexToOldIndexMap","prevChild","newIndex","increasingNewIndexSequence","len","arrI","getSequence","nextIndex","move","moveType","leave","delayLeave","afterLeave","performLeave","doRemove","deactivate","shouldInvokeDirs","onVnodeBeforeUnmount","unmountComponent","onVnodeUnmounted","removeFragment","performRemove","_vnode","mt","mc","pc","pbc","o","createApp","baseCreateRenderer","ch1","ch2","NULL_DYNAMIC_COMPONENT","isVNode","__v_isVNode","normalizeKey","normalizeRef","isBlockNode","cloned","normalizeChildren","__vccOpts","klass","__isSuspense","isSuspense","__isTeleport","isTeleport","__v_skip","ssContent","ssFallback","targetAnchor","normalize","extraProps","mergeRef","mergedProps","toMerge","existing","incoming","mergeProps","staticCount","createTextVNode","text","flag","slot","slotFlag","getPublicInstance","publicPropertiesMap","$","$el","$data","$props","$attrs","$slots","$refs","$parent","$root","$emit","$options","$forceUpdate","$nextTick","$watch","normalizedProps","publicGetter","cssModule","__cssModules","RuntimeCompiledPublicInstanceProxyHandlers","unscopables","skipOptions","_rc","getterOrOptions","setter","computed$1","doc","document","staticTemplateCache","nodeOps","insertBefore","removeChild","tag","createElementNS","multiple","setAttribute","createTextNode","node","nodeValue","textContent","querySelector","selector","content","before","previousSibling","lastChild","template","innerHTML","wrapper","firstChild","appendChild","importantRE","setStyle","setProperty","prefixed","rawName","prefixCache","prefixes","autoPrefix","xlinkNS","_getNow","Date","now","skipTimestampCheck","window","createEvent","timeStamp","ffMatch","navigator","userAgent","cachedNow","reset","patchEvent","prevValue","nextValue","invokers","_vei","existingInvoker","optionsModifierRE","parseName","addEventListener","initialValue","invoker","attached","originalStop","stopImmediatePropagation","_stopped","patchStopImmediatePropagation","createInvoker","removeEventListener","nativeOnRE","rendererOptions","transitionClasses","_vtc","join","removeAttribute","className","patchClass","display","patchStyle","tagName","shouldSetAsProp","_a","patchDOMProp","_trueValue","_falseValue","removeAttributeNS","setAttributeNS","isBoolean","patchAttr","containerOrSelector","normalizeContainer","SVGElement","Element","server","apiCache","htmlDecode","input","DOMParser","parseFromString","documentElement","getCurrentEnv","env","oceanPress","siYuan","unknown","selectors","currentNodeId","frameElement","parentElement","dataset","nId","nodeId","fetch_proxy","init","defaultParma","headers","Accept","fetch","async","response","json","code","reject","log","sqlQuery","stmt","body","JSON","stringify","setBlockAttrs","getBlockAttrs","getBlockAttr","find","f","noCache","getCacheKey","getAttribute","parse","cacheExtract","cyrb53","seed","h1","h2","ch","charCodeAt","imul","warp","element","cacheWarp","siYuanApi"],"mappings":"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"}